doctype
html
public
w
c
dtd
xhtml
transitional
en
navigation
href
genindex
html
title
general
index
accesskey
index
href
modindex
html
title
global
module
index
accesskey
modules
href
html
title
new
python
accesskey
n
next
href
index
html
title
new
python
accesskey
p
previous
img
src
static
py
png
alt
style
vertical
align
middle
margin
top
px
python
python
v
documentation
new
python
new
python
author
kuchling
amk
amk
ca
release
date
october
article
explains
new
features
python
released
october
release
schedule
described
pep
major
theme
python
preparing
migration
path
python
major
redesign
language
whenever
possible
python
incorporates
new
features
syntax
remaining
compatible
existing
code
removing
older
features
syntax
possible
python
tries
adding
compatibility
functions
future
builtins
module
switch
warn
usages
become
unsupported
significant
new
packages
added
standard
library
multiprocessing
json
modules
many
new
features
related
python
way
python
also
sees
number
improvements
bugfixes
throughout
source
search
change
logs
finds
patches
applied
bugs
fixed
python
figures
likely
underestimates
article
attempt
provide
complete
specification
new
features
instead
provides
convenient
overview
full
details
refer
documentation
python
want
understand
rationale
design
implementation
refer
pep
particular
new
feature
whenever
possible
new
python
links
bug
patch
item
change
python
development
cycle
python
versions
synchronized
alpha
beta
releases
versions
made
days
development
influenced
many
features
python
far
ranging
redesign
python
breaks
compatibility
x
series
means
existing
python
code
need
conversion
order
run
python
however
changes
necessarily
break
compatibility
cases
new
features
cause
existing
code
break
backported
described
document
appropriate
place
derived
features
complex
method
converting
objects
complex
number
alternate
syntax
catching
exceptions
except
typeerror
exc
addition
functools
reduce
synonym
built
reduce
function
python
adds
several
new
built
functions
changes
semantics
existing
builtins
functions
new
bin
simply
added
python
existing
builtins
changed
instead
future
builtins
module
versions
new
semantics
code
written
compatible
future
builtins
import
hex
map
necessary
new
command
line
switch
enables
warnings
features
removed
python
run
code
switch
see
much
work
necessary
port
code
value
switch
available
python
code
boolean
variable
sys
py
kwarning
c
extension
code
py
py
kwarningflag
see
also
xxx
series
peps
contains
proposals
python
pep
describes
development
process
python
start
pep
describes
general
goals
python
explore
higher
numbered
peps
propose
specific
features
changes
development
process
developed
python
development
process
underwent
two
significant
changes
switched
sourceforge
issue
tracker
customized
roundup
installation
documentation
converted
latex
restructuredtext
new
issue
tracker
roundup
long
time
python
developers
growing
increasingly
annoyed
sourceforge
bug
tracker
sourceforge
hosted
solution
permit
much
customization
example
possible
customize
life
cycle
issues
infrastructure
committee
python
software
foundation
therefore
posted
call
issue
trackers
asking
volunteers
set
different
products
import
bugs
patches
sourceforge
four
different
trackers
examined
jira
launchpad
roundup
trac
committee
eventually
settled
jira
roundup
two
candidates
jira
commercial
product
offers
cost
hosted
instances
free
software
projects
roundup
open
source
project
requires
volunteers
administer
server
host
posting
call
volunteers
new
roundup
installation
set
one
installation
roundup
host
multiple
trackers
server
also
hosts
issue
trackers
jython
python
web
site
surely
find
uses
future
possible
edition
new
python
links
bug
patch
item
change
hosting
python
bug
tracker
kindly
provided
upfront
systems
stellenbosch
south
africa
martin
von
loewis
put
lot
effort
importing
existing
bugs
patches
sourceforge
scripts
import
operation
may
useful
projects
wishing
move
sourceforge
roundup
see
also
python
bug
tracker
jython
bug
tracker
roundup
downloads
documentation
martin
von
loewis
conversion
scripts
new
documentation
format
restructuredtext
using
sphinx
python
documentation
written
using
latex
since
project
started
around
early
documentation
printed
later
study
viewed
online
latex
widely
used
provided
attractive
printed
output
remaining
straightforward
write
basic
rules
markup
learned
today
latex
still
used
writing
publications
destined
printing
landscape
programming
tools
shifted
longer
print
reams
documentation
instead
browse
online
html
become
important
format
support
unfortunately
converting
latex
html
fairly
complicated
fred
l
drake
jr
long
time
python
documentation
editor
spent
lot
time
maintaining
conversion
process
occasionally
people
would
suggest
converting
documentation
sgml
later
xml
performing
good
conversion
major
task
one
ever
committed
time
required
finish
job
development
cycle
georg
brandl
put
lot
effort
building
new
toolchain
processing
documentation
resulting
package
called
sphinx
available
sphinx
concentrates
html
output
producing
attractively
styled
modern
html
printed
output
still
supported
conversion
latex
input
format
restructuredtext
markup
syntax
supporting
custom
extensions
directives
commonly
used
python
community
sphinx
standalone
package
used
writing
almost
two
dozen
projects
listed
sphinx
web
site
adopted
sphinx
documentation
tool
see
also
documenting
python
describes
write
python
documentation
sphinx
documentation
code
sphinx
toolchain
docutils
underlying
restructuredtext
parser
toolset
pep
statement
previous
version
python
added
statement
optional
feature
enabled
future
import
statement
directive
statement
longer
needs
specially
enabled
means
always
keyword
rest
section
copy
corresponding
section
new
python
document
familiar
statement
python
skip
section
statement
clarifies
code
previously
would
use
try
finally
blocks
ensure
clean
code
executed
section
discuss
statement
commonly
used
next
section
examine
implementation
details
show
write
objects
use
statement
statement
control
flow
structure
whose
basic
structure
expression
variable
block
expression
evaluated
result
object
supports
context
management
protocol
enter
exit
methods
object
enter
called
block
executed
therefore
run
set
code
also
may
return
value
bound
name
variable
given
note
carefully
variable
assigned
result
expression
execution
block
finished
object
exit
method
called
even
block
raised
exception
therefore
run
clean
code
standard
python
objects
support
context
management
protocol
used
statement
file
objects
one
example
open
etc
passwd
r
f
line
f
print
line
processing
code
statement
executed
file
object
f
automatically
closed
even
loop
raised
exception
part
way
block
note
case
f
object
created
open
file
enter
returns
self
threading
module
locks
condition
variables
also
support
statement
lock
threading
lock
lock
critical
section
code
lock
acquired
block
executed
always
released
block
complete
localcontext
function
decimal
module
makes
easy
save
restore
current
decimal
context
encapsulates
desired
precision
rounding
characteristics
computations
decimal
import
decimal
context
localcontext
displays
default
precision
digits
v
decimal
print
v
sqrt
localcontext
context
prec
code
block
uses
precision
digits
original
context
restored
exiting
block
print
v
sqrt
writing
context
managers
hood
statement
fairly
complicated
people
use
company
existing
objects
need
know
details
skip
rest
section
like
authors
new
objects
need
understand
details
underlying
implementation
keep
reading
high
level
explanation
context
management
protocol
expression
evaluated
result
object
called
context
manager
context
manager
must
enter
exit
methods
context
manager
enter
method
called
value
returned
assigned
var
var
clause
present
value
simply
discarded
code
block
executed
block
raises
exception
context
manager
exit
method
called
three
arguments
exception
details
type
value
traceback
values
returned
sys
exc
info
also
none
exception
occurred
method
return
value
controls
whether
exception
raised
false
value
raises
exception
true
result
suppressing
rarely
want
suppress
exception
author
code
containing
statement
never
realize
anything
went
wrong
block
raise
exception
exit
method
still
called
type
value
traceback
none
let
think
example
present
detailed
code
sketch
methods
necessary
database
supports
transactions
people
unfamiliar
database
terminology
set
changes
database
grouped
transaction
transactions
either
committed
meaning
changes
written
database
rolled
back
meaning
changes
discarded
database
unchanged
see
database
textbook
information
let
assume
object
representing
database
connection
goal
let
user
write
code
like
db
connection
databaseconnection
db
connection
cursor
cursor
execute
insert
cursor
execute
delete
operations
transaction
committed
code
block
runs
flawlessly
rolled
back
exception
basic
interface
databaseconnection
assume
class
databaseconnection
database
interface
def
cursor
self
returns
cursor
object
starts
new
transaction
def
commit
self
commits
current
transaction
def
rollback
self
rolls
back
current
transaction
enter
method
pretty
easy
start
new
transaction
application
resulting
cursor
object
would
useful
result
method
return
user
add
cursor
statement
bind
cursor
variable
name
class
databaseconnection
def
enter
self
code
start
new
transaction
cursor
self
cursor
return
cursor
exit
method
complicated
work
done
method
check
exception
occurred
exception
transaction
committed
transaction
rolled
back
exception
code
execution
fall
end
function
returning
default
value
none
none
false
exception
raised
automatically
wished
could
explicit
add
return
statement
marked
location
class
databaseconnection
def
exit
self
type
value
tb
tb
none
exception
commit
self
commit
else
exception
occurred
rollback
self
rollback
return
false
contextlib
module
contextlib
module
provides
functions
decorator
useful
writing
objects
use
statement
decorator
called
contextmanager
lets
write
single
generator
function
instead
defining
new
class
generator
yield
exactly
one
value
code
yield
executed
enter
method
value
yielded
method
return
value
get
bound
variable
statement
clause
code
yield
executed
exit
method
exception
raised
block
raised
yield
statement
using
decorator
database
example
previous
section
could
written
contextlib
import
contextmanager
def
db
transaction
connection
cursor
connection
cursor
try
yield
cursor
except
connection
rollback
raise
else
connection
commit
db
databaseconnection
db
transaction
db
cursor
contextlib
module
also
nested
mgr
mgr
function
combines
number
context
managers
need
write
nested
statements
example
single
statement
starts
database
transaction
acquires
thread
lock
lock
threading
lock
nested
db
transaction
db
lock
cursor
locked
finally
closing
function
returns
argument
bound
variable
calls
argument
close
method
end
block
import
urllib
sys
contextlib
import
closing
closing
urllib
urlopen
f
line
f
sys
stdout
write
line
see
also
pep
statement
pep
written
guido
van
rossum
nick
coghlan
implemented
mike
bland
guido
van
rossum
neal
norwitz
pep
shows
code
generated
statement
helpful
learning
statement
works
documentation
contextlib
module
pep
explicit
relative
imports
main
module
python
switch
allows
running
module
script
ran
module
located
inside
package
relative
imports
work
correctly
fix
python
adds
package
attribute
modules
attribute
present
relative
imports
relative
value
attribute
instead
name
attribute
pep
style
importers
set
package
necessary
runpy
module
implements
switch
relative
imports
work
correctly
scripts
running
inside
package
pep
per
user
site
packages
directory
run
python
module
search
path
sys
path
usually
includes
directory
whose
path
ends
site
packages
directory
intended
hold
locally
installed
packages
available
users
using
machine
particular
site
installation
python
introduces
convention
user
specific
site
directories
directory
varies
depending
platform
unix
mac
os
x
local
windows
appdata
python
within
directory
version
specific
subdirectories
lib
python
site
packages
unix
mac
os
python
site
packages
windows
like
default
directory
overridden
environment
variable
pythonuserbase
sets
root
directory
used
python
versions
supporting
feature
windows
directory
application
specific
data
changed
setting
appdata
environment
variable
also
modify
site
py
file
python
installation
feature
disabled
entirely
running
python
option
setting
pythonnousersite
environment
variable
see
also
pep
per
user
site
packages
directory
pep
written
implemented
christian
heimes
pep
multiprocessing
package
new
multiprocessing
package
lets
python
programs
create
new
processes
perform
computation
return
result
parent
parent
child
processes
communicate
using
queues
pipes
synchronize
operations
using
locks
semaphores
share
simple
arrays
data
multiprocessing
module
started
exact
emulation
threading
module
using
processes
instead
threads
goal
discarded
along
path
python
general
approach
module
still
similar
fundamental
class
process
passed
callable
object
collection
arguments
start
method
sets
callable
running
subprocess
call
alive
method
check
whether
subprocess
still
running
join
method
wait
process
exit
simple
example
subprocess
calculate
factorial
function
calculation
written
strangely
takes
significantly
longer
input
argument
multiple
import
time
multiprocessing
import
process
queue
def
factorial
queue
n
compute
factorial
n
multiple
function
take
much
longer
n
time
sleep
n
calculate
result
fact
l
range
n
fact
fact
put
result
queue
queue
put
fact
name
main
queue
queue
n
p
process
target
factorial
args
queue
n
p
start
p
join
result
queue
get
print
factorial
n
result
queue
used
communicate
input
parameter
n
result
queue
object
stored
global
variable
child
process
use
value
variable
child
created
queue
parent
child
use
object
communicate
parent
change
value
global
variable
child
value
would
unaffected
vice
versa
two
classes
pool
manager
provide
higher
level
interfaces
pool
create
fixed
number
worker
processes
requests
distributed
workers
calling
apply
apply
async
add
single
request
map
map
async
add
number
requests
following
code
uses
pool
spread
requests
across
worker
processes
retrieve
list
results
multiprocessing
import
pool
def
factorial
n
dictionary
compute
factorial
p
pool
result
p
map
factorial
range
v
result
print
v
produces
following
output
high
level
interface
manager
class
creates
separate
server
process
hold
master
copies
python
data
structures
processes
access
modify
data
structures
using
proxy
objects
following
example
creates
shared
dictionary
calling
dict
method
worker
processes
insert
values
dictionary
locking
done
automatically
matter
example
manager
methods
also
include
lock
rlock
semaphore
create
shared
locks
import
time
multiprocessing
import
pool
manager
def
factorial
n
dictionary
compute
factorial
calculate
result
fact
l
range
n
fact
fact
store
result
dictionary
dictionary
n
fact
name
main
p
pool
mgr
manager
mgr
dict
create
shared
dictionary
run
tasks
using
pool
n
range
p
apply
async
factorial
n
mark
pool
closed
tasks
added
p
close
wait
tasks
exit
p
join
output
results
k
v
sorted
items
print
k
v
produce
output
see
also
documentation
multiprocessing
module
pep
addition
multiprocessing
package
pep
written
jesse
noller
richard
oudkerk
implemented
richard
oudkerk
jesse
noller
pep
advanced
string
formatting
python
operator
supplemented
powerful
string
formatting
method
format
support
str
format
method
backported
python
bit
unicode
strings
format
method
treats
string
template
takes
arguments
formatted
formatting
template
uses
curly
brackets
special
characters
substitute
positional
argument
string
user
id
format
root
user
id
root
use
named
keyword
arguments
user
id
uid
last
seen
last
login
format
uid
root
last
login
mar
user
id
root
last
seen
mar
curly
brackets
escaped
doubling
empty
dict
format
empty
dict
field
names
integers
indicating
positional
arguments
etc
names
keyword
arguments
also
supply
compound
field
names
read
attributes
access
dictionary
keys
import
sys
print
platform
platform
n
python
version
version
format
sys
platform
darwin
python
version
trunk
mar
gcc
apple
computer
inc
build
import
mimetypes
content
type
mp
format
mimetypes
types
map
content
type
video
mp
note
using
dictionary
style
notation
mp
need
put
quotation
marks
around
string
look
value
using
mp
key
strings
beginning
number
converted
integer
write
complicated
expressions
inside
format
string
far
shown
specify
field
substitute
resulting
string
precise
formatting
used
also
controllable
adding
colon
followed
format
specifier
example
field
left
justify
pad
characters
field
right
justify
pad
characters
fmt
fmt
format
registration
registration
fmt
format
tutorial
tutorial
fmt
format
banquet
banquet
format
specifiers
reference
fields
nesting
fmt
width
fmt
format
invoice
width
invoice
width
fmt
format
invoice
width
invoice
alignment
field
within
desired
width
specified
character
effect
default
left
align
right
align
center
numeric
types
pad
sign
format
specifiers
also
include
presentation
type
controls
value
formatted
example
floating
point
numbers
formatted
general
number
exponential
notation
g
format
e
format
e
variety
presentation
types
available
consult
documentation
complete
list
sample
b
binary
outputs
number
base
c
character
converts
integer
corresponding
unicode
character
printing
decimal
integer
outputs
number
base
octal
format
outputs
number
base
x
hex
format
outputs
number
base
using
lower
case
letters
digits
e
exponent
notation
prints
number
scientific
notation
using
letter
e
indicate
exponent
g
general
format
prints
number
fixed
point
number
unless
number
large
case
switches
e
exponent
notation
n
number
g
floats
integers
except
uses
current
locale
setting
insert
appropriate
number
separator
characters
percentage
multiplies
number
displays
fixed
f
format
followed
percent
sign
classes
types
define
format
method
control
formatted
receives
single
argument
format
specifier
def
format
self
format
spec
isinstance
format
spec
unicode
return
unicode
str
self
else
return
str
self
also
format
builtin
format
single
value
calls
type
format
method
provided
specifier
format
f
see
also
format
string
syntax
reference
documentation
format
fields
pep
advanced
string
formatting
pep
written
talin
implemented
eric
smith
pep
print
function
print
statement
becomes
print
function
python
making
print
function
makes
possible
replace
function
def
print
importing
new
function
somewhere
else
python
future
import
removes
print
language
syntax
letting
use
functional
form
instead
example
future
import
print
function
print
entries
len
dictionary
file
sys
stderr
signature
new
function
def
print
args
sep
end
n
file
none
parameters
args
positional
arguments
whose
values
printed
sep
separator
printed
arguments
end
ending
text
printed
arguments
output
file
file
object
output
sent
see
also
pep
make
print
function
pep
written
georg
brandl
pep
exception
handling
changes
one
error
python
programmers
occasionally
make
writing
following
code
try
except
typeerror
valueerror
wrong
author
probably
trying
catch
typeerror
valueerror
exceptions
code
actually
something
different
catch
typeerror
bind
resulting
exception
object
local
name
valueerror
valueerror
exception
caught
correct
code
specifies
tuple
exceptions
try
except
typeerror
valueerror
error
happens
use
comma
ambiguous
indicate
two
different
nodes
parse
tree
single
node
tuple
python
makes
unambiguous
replacing
comma
word
catch
exception
store
exception
object
variable
exc
must
write
try
except
typeerror
exc
python
support
use
therefore
interprets
first
example
catching
two
different
exceptions
python
supports
comma
existing
code
continue
work
therefore
suggest
using
writing
new
python
code
executed
see
also
pep
catching
exceptions
python
pep
written
implemented
collin
winter
pep
byte
literals
python
adopts
unicode
language
fundamental
string
type
denotes
bit
literals
differently
either
b
string
using
bytes
constructor
future
compatibility
python
adds
bytes
synonym
str
type
also
supports
b
notation
str
differs
bytes
type
various
ways
notably
constructor
completely
different
bytes
elements
long
containing
bytes
representing
abc
bytes
returns
byte
string
representing
str
list
primary
use
bytes
write
tests
object
type
isinstance
x
bytes
help
converter
tell
whether
x
code
intends
strings
contain
either
characters
bit
bytes
use
either
bytes
str
represent
intention
exactly
resulting
code
also
correct
python
also
future
import
causes
string
literals
become
unicode
strings
means
u
escape
sequences
used
include
unicode
characters
future
import
unicode
literals
u
f
u
u
e
u
u
f
u
u
u
u
f
u
f
u
e
u
print
len
unicode
characters
c
level
python
rename
existing
bit
string
type
called
pystringobject
python
x
pybytesobject
python
uses
define
support
using
names
pybytesobject
pybytes
check
pybytes
fromstringandsize
functions
macros
used
strings
instances
bytes
type
immutable
strings
new
bytearray
type
stores
mutable
sequence
bytes
bytearray
bytearray
b
abc
b
bytearray
u
u
ef
u
utf
b
bytearray
b
xe
x
xaf
xe
x
x
b
xe
b
bytearray
b
xe
x
xaf
xe
x
x
unicode
str
b
utf
u
u
ef
u
byte
arrays
support
methods
string
types
startswith
endswith
find
rfind
methods
lists
append
pop
reverse
b
bytearray
abc
b
append
b
append
ord
e
b
bytearray
b
abcde
also
corresponding
c
api
pybytearray
fromobject
pybytearray
fromstringandsize
various
functions
see
also
pep
bytes
literals
python
pep
written
jason
orendorff
backported
christian
heimes
pep
new
library
python
built
file
objects
support
number
methods
file
like
objects
necessarily
support
objects
imitate
files
usually
support
read
write
may
support
readline
example
python
introduces
layered
library
io
module
separates
buffering
text
handling
features
fundamental
read
write
operations
three
levels
abstract
base
classes
provided
io
module
rawiobase
defines
raw
operations
read
readinto
write
seek
tell
truncate
close
methods
class
often
map
single
system
call
also
readable
writable
seekable
methods
determining
operations
given
object
allow
python
concrete
implementations
class
files
sockets
python
restructured
file
socket
objects
way
bufferediobase
abstract
base
class
buffers
data
memory
reduce
number
system
calls
used
making
processing
efficient
supports
methods
rawiobase
adds
raw
attribute
holding
underlying
raw
object
five
concrete
classes
implementing
abc
bufferedwriter
bufferedreader
objects
support
write
read
usage
seek
method
random
access
bufferedrandom
objects
support
read
write
access
upon
underlying
stream
bufferedrwpair
objects
ttys
read
write
operations
acting
upon
unconnected
streams
data
bytesio
class
supports
reading
writing
seeking
memory
buffer
textiobase
provides
functions
reading
writing
strings
remember
strings
unicode
python
supporting
universal
newlines
textiobase
defines
readline
method
supports
iteration
upon
objects
two
concrete
implementations
textiowrapper
wraps
buffered
object
supporting
methods
text
adding
buffer
attribute
access
underlying
object
stringio
simply
buffers
everything
memory
without
ever
writing
anything
disk
python
io
stringio
implemented
pure
python
pretty
slow
therefore
stick
existing
stringio
module
cstringio
point
python
io
module
rewritten
c
speed
perhaps
c
implementation
backported
x
releases
python
underlying
implementations
restructured
build
top
io
module
classes
module
provided
make
easier
write
code
forward
compatible
save
developers
effort
writing
implementations
buffering
text
see
also
pep
new
pep
written
daniel
stutzbach
mike
verdone
guido
van
rossum
code
guido
van
rossum
georg
brandl
walter
doerwald
jeremy
hylton
martin
von
loewis
tony
lownds
others
pep
revised
buffer
protocol
buffer
protocol
c
level
api
lets
python
types
exchange
pointers
internal
representations
memory
mapped
file
viewed
buffer
characters
example
lets
another
module
treat
memory
mapped
files
string
characters
searched
primary
users
buffer
protocol
numeric
processing
packages
numpy
expose
internal
representation
arrays
callers
write
data
directly
array
instead
going
slower
api
pep
updates
buffer
protocol
light
experience
numpy
development
adding
number
new
features
indicating
shape
array
locking
memory
region
important
new
c
api
function
pyobject
getbuffer
pyobject
obj
py
buffer
view
int
flags
takes
object
set
flags
fills
py
buffer
structure
information
object
memory
representation
objects
use
operation
lock
memory
place
external
caller
could
modifying
contents
corresponding
pybuffer
release
py
buffer
view
indicate
external
caller
done
flags
argument
pyobject
getbuffer
specifies
constraints
upon
memory
returned
examples
pybuf
writable
indicates
memory
must
writable
pybuf
lock
requests
read
exclusive
lock
memory
pybuf
c
contiguous
pybuf
f
contiguous
requests
c
contiguous
last
dimension
varies
fastest
fortran
contiguous
first
dimension
varies
fastest
array
layout
two
new
argument
codes
pyarg
parsetuple
z
return
locked
buffer
objects
parameter
see
also
pep
revising
buffer
protocol
pep
written
travis
oliphant
carl
banks
implemented
travis
oliphant
pep
abstract
base
classes
object
oriented
languages
java
support
interfaces
declaring
class
given
set
methods
supports
given
access
protocol
abstract
base
classes
abcs
equivalent
feature
python
abc
support
consists
abc
module
containing
metaclass
called
abcmeta
special
handling
metaclass
isinstance
issubclass
builtins
collection
basic
abcs
python
developers
think
widely
useful
future
versions
python
probably
add
abcs
let
say
particular
class
wish
know
whether
supports
dictionary
style
access
phrase
dictionary
style
vague
however
probably
means
accessing
items
obj
works
imply
setting
items
obj
value
works
object
keys
values
items
methods
iterative
variants
iterkeys
copy
update
iterating
object
iter
python
collections
module
includes
number
different
abcs
represent
distinctions
iterable
indicates
class
defines
iter
container
means
class
defines
contains
method
therefore
supports
x
expressions
basic
dictionary
interface
getting
items
setting
items
keys
values
items
defined
mutablemapping
abc
derive
classes
particular
abc
indicate
support
abc
interface
import
collections
class
storage
collections
mutablemapping
alternatively
could
write
class
without
deriving
desired
abc
instead
register
class
calling
abc
register
method
import
collections
class
storage
collections
mutablemapping
register
storage
classes
write
deriving
abc
probably
clearer
register
method
useful
written
new
abc
describe
existing
type
class
want
declare
third
party
class
implements
abc
example
defined
printabletype
abc
legal
register
python
types
printabletype
register
int
printabletype
register
float
printabletype
register
str
classes
obey
semantics
specified
abc
python
check
class
author
understand
abc
requirements
implement
code
accordingly
check
whether
object
supports
particular
interface
write
def
func
isinstance
collections
mutablemapping
raise
valueerror
mapping
object
expected
r
feel
must
begin
writing
lots
checks
example
python
strong
tradition
duck
typing
explicit
type
checking
never
done
code
simply
calls
methods
object
trusting
methods
raising
exception
judicious
checking
abcs
absolutely
necessary
write
abcs
using
abc
abcmeta
metaclass
class
definition
abc
import
abcmeta
abstractmethod
class
drawable
metaclass
abcmeta
def
draw
self
x
scale
pass
def
draw
doubled
self
x
self
draw
x
scale
class
square
drawable
def
draw
self
x
scale
drawable
abc
draw
doubled
method
renders
object
twice
size
implemented
terms
methods
described
drawable
classes
implementing
abc
therefore
need
provide
implementation
draw
doubled
though
implementation
draw
necessary
though
abc
provide
useful
generic
implementation
apply
abstractmethod
decorator
methods
draw
must
implemented
python
raise
exception
classes
define
method
note
exception
raised
actually
try
create
instance
subclass
lacking
method
class
circle
drawable
pass
c
circle
traceback
recent
call
last
file
stdin
line
module
typeerror
instantiate
abstract
class
circle
abstract
methods
draw
abstract
data
attributes
declared
using
abstractproperty
decorator
abc
import
abstractproperty
def
readonly
self
return
self
x
subclasses
must
define
readonly
property
see
also
pep
introducing
abstract
base
classes
pep
written
guido
van
rossum
talin
implemented
guido
van
rossum
backported
benjamin
aranguren
alex
martelli
pep
integer
literal
support
syntax
python
changes
syntax
octal
base
integer
literals
prefixing
instead
leading
zero
adds
support
binary
base
integer
literals
signalled
b
b
prefix
python
drop
support
leading
signalling
octal
number
add
support
b
b
oct
builtin
still
returns
numbers
prefixed
leading
zero
new
bin
builtin
returns
binary
representation
number
oct
future
builtins
oct
bin
b
int
long
builtins
accept
b
prefixes
base
base
requested
base
argument
zero
signalling
base
used
determined
string
int
int
int
b
int
b
see
also
pep
integer
literal
support
syntax
pep
written
patrick
maupin
backported
eric
smith
pep
class
decorators
decorators
extended
functions
classes
legal
write
class
pass
equivalent
class
pass
foo
bar
see
also
pep
class
decorators
pep
written
collin
winter
pep
type
hierarchy
numbers
python
adds
several
abstract
base
classes
numeric
types
inspired
scheme
numeric
tower
classes
backported
numbers
module
general
abc
number
defines
operations
exists
allow
checking
object
number
isinstance
obj
number
complex
subclass
number
complex
numbers
undergo
basic
operations
addition
subtraction
multiplication
division
exponentiation
retrieve
real
imaginary
parts
obtain
number
conjugate
python
built
complex
type
implementation
complex
real
derives
complex
adds
operations
work
real
numbers
floor
trunc
rounding
taking
remainder
mod
n
floor
division
comparisons
rational
numbers
derive
real
numerator
denominator
properties
converted
floats
python
adds
simple
rational
number
class
fraction
fractions
module
called
fraction
instead
rational
avoid
name
clash
numbers
rational
integral
numbers
derive
rational
shifted
left
right
combined
using
bitwise
operations
used
array
indexes
slice
boundaries
python
pep
slightly
redefines
existing
builtins
round
math
floor
math
ceil
adds
new
one
math
trunc
backported
python
math
trunc
rounds
toward
zero
returning
closest
integral
function
argument
zero
see
also
pep
type
hierarchy
numbers
pep
written
jeffrey
yasskin
scheme
numerical
tower
guile
manual
scheme
number
datatypes
r
rs
scheme
specification
fractions
module
fill
hierarchy
numeric
types
fractions
module
provides
rational
number
class
rational
numbers
store
values
numerator
denominator
forming
fraction
exactly
represent
numbers
floating
point
numbers
approximate
fraction
constructor
takes
two
integral
values
numerator
denominator
resulting
fraction
fractions
import
fraction
fraction
b
fraction
float
float
b
b
fraction
b
fraction
converting
floating
point
numbers
rationals
float
type
integer
ratio
method
returns
numerator
denominator
fraction
evaluates
floating
point
value
integer
ratio
integer
ratio
l
l
integer
ratio
l
l
note
values
approximated
floating
point
numbers
simplified
number
approximated
fraction
attempts
match
floating
point
value
exactly
fractions
module
based
upon
implementation
sjoerd
mullender
python
demo
classes
directory
long
time
implementation
significantly
updated
jeffrey
yasskin
language
changes
smaller
changes
made
core
python
language
directories
zip
archives
containing
main
py
file
executed
directly
passing
name
interpreter
directory
zip
archive
automatically
inserted
first
entry
sys
path
suggestion
initial
patch
andy
chu
subsequently
revised
phillip
j
eby
nick
coghlan
issue
hasattr
function
catching
ignoring
errors
assumption
meant
getattr
method
failing
somehow
return
value
hasattr
would
therefore
false
logic
applied
keyboardinterrupt
systemexit
however
python
longer
discard
exceptions
hasattr
encounters
fixed
benjamin
peterson
issue
calling
function
using
syntax
provide
keyword
arguments
longer
required
use
python
dictionary
mapping
work
def
f
kw
print
sorted
kw
ud
userdict
userdict
ud
ud
b
string
f
ud
b
contributed
alexander
belopolsky
issue
also
become
legal
provide
keyword
arguments
args
argument
function
call
def
f
args
kw
print
args
kw
f
keyword
keyword
previously
would
syntax
error
contributed
amaury
forgeot
arc
issue
new
builtin
next
iterator
default
returns
next
item
specified
iterator
default
argument
supplied
returned
iterator
exhausted
otherwise
stopiteration
exception
raised
backported
issue
tuples
index
count
methods
matching
list
type
index
count
methods
index
count
contributed
raymond
hettinger
built
types
improved
support
extended
slicing
syntax
accepting
various
combinations
start
stop
step
previously
support
partial
certain
corner
cases
work
implemented
thomas
wouters
properties
three
attributes
getter
setter
deleter
decorators
providing
useful
shortcuts
adding
getter
setter
deleter
function
existing
property
would
use
like
class
c
object
def
x
self
return
self
x
setter
def
x
self
value
self
x
value
deleter
def
x
self
del
self
x
class
c
x
getter
def
x
self
return
self
x
setter
def
x
self
value
self
x
value
several
methods
built
set
types
accept
multiple
iterables
intersection
intersection
update
union
update
difference
difference
update
set
intersection
abc
cdf
intersection
inputs
set
difference
set
contributed
raymond
hettinger
many
floating
point
features
added
float
function
turn
string
nan
ieee
number
value
inf
inf
positive
negative
infinity
works
platform
ieee
semantics
contributed
christian
heimes
issue
functions
math
module
isinf
isnan
return
true
floating
point
argument
infinite
number
issue
conversion
functions
added
convert
floating
point
numbers
hexadecimal
strings
issue
functions
convert
floats
string
representation
without
introducing
rounding
errors
conversion
decimal
binary
floats
hex
method
returns
string
representation
float
fromhex
method
converts
string
back
number
hex
x
e
p
float
fromhex
x
e
p
b
b
hex
x
p
numerical
nicety
creating
complex
number
two
floats
systems
support
signed
zeros
complex
constructor
preserve
sign
zero
fixed
mark
dickinson
issue
classes
inherit
hash
method
parent
class
set
hash
none
indicate
class
hashable
make
hash
obj
raise
typeerror
class
indicated
implementing
hashable
abc
defined
cmp
eq
method
compares
objects
value
rather
identity
objects
default
hash
method
uses
id
obj
hash
value
tidy
way
remove
hash
method
inherited
parent
class
assigning
none
implemented
override
c
level
extensions
set
tp
hash
pyobject
hashnotimplemented
fixed
nick
coghlan
amaury
forgeot
arc
issue
generatorexit
exception
subclasses
baseexception
instead
exception
means
exception
handler
except
exception
inadvertently
catch
generatorexit
contributed
chad
austin
issue
generator
objects
gi
code
attribute
refers
original
code
object
backing
generator
contributed
collin
winter
issue
compile
built
function
accepts
keyword
arguments
well
positional
parameters
contributed
thomas
wouters
issue
complex
constructor
accepts
strings
containing
parenthesized
complex
numbers
meaning
complex
repr
cplx
round
trip
values
example
complex
j
returns
value
j
issue
string
translate
method
accepts
none
translation
table
parameter
treated
identity
transformation
makes
easier
carry
operations
delete
characters
contributed
bengt
richter
implemented
raymond
hettinger
issue
built
dir
function
checks
dir
method
objects
receives
method
must
return
list
strings
containing
names
valid
attributes
object
lets
object
control
value
dir
produces
objects
getattr
getattribute
methods
use
advertise
pseudo
attributes
honor
issue
instance
method
objects
new
attributes
object
function
comprising
method
new
synonym
im
self
self
im
func
also
available
func
old
names
still
supported
python
gone
obscure
change
use
locals
function
inside
class
statement
resulting
dictionary
longer
returns
free
variables
free
variables
case
variables
referenced
class
statement
attributes
class
optimizations
warnings
module
rewritten
c
makes
possible
invoke
warnings
parser
may
also
make
interpreter
startup
faster
contributed
neal
norwitz
brett
cannon
issue
type
objects
cache
methods
reduce
work
required
find
correct
method
implementation
particular
class
cached
interpreter
need
traverse
base
classes
figure
right
method
call
cache
cleared
base
class
class
modified
cache
remain
correct
even
face
python
dynamic
nature
original
optimization
implemented
armin
rigo
updated
python
kevin
jacobs
issue
default
change
applied
types
included
python
core
extension
modules
may
necessarily
compatible
cache
must
explicitly
add
py
tpflags
version
tag
module
tp
flags
field
enable
method
cache
compatible
method
cache
extension
module
code
must
directly
access
modify
tp
dict
member
types
implements
modules
impossible
python
interpreter
determine
see
issue
discussion
function
calls
use
keyword
arguments
significantly
faster
quick
pointer
comparison
usually
saving
time
full
string
comparison
contributed
raymond
hettinger
initial
implementation
antoine
pitrou
issue
functions
struct
module
rewritten
c
thanks
work
need
speed
sprint
contributed
raymond
hettinger
standard
built
types
set
bit
type
objects
speeds
checking
whether
object
subclass
one
types
contributed
neal
norwitz
unicode
strings
use
faster
code
detecting
whitespace
line
breaks
speeds
split
method
splitlines
contributed
antoine
pitrou
memory
usage
reduced
using
pymalloc
unicode
string
data
statement
stores
exit
method
stack
producing
small
speedup
implemented
jeffrey
yasskin
reduce
memory
usage
garbage
collector
clear
internal
free
lists
garbage
collecting
highest
generation
objects
may
return
memory
operating
system
sooner
interpreter
changes
two
command
line
options
reserved
use
python
implementations
j
switch
reserved
use
jython
jython
specific
options
switches
passed
underlying
jvm
x
reserved
options
specific
particular
implementation
python
cpython
jython
ironpython
either
option
used
python
interpreter
report
option
currently
used
python
prevented
writing
pyc
pyo
files
supplying
b
switch
python
interpreter
setting
pythondontwritebytecode
environment
variable
running
interpreter
setting
available
python
programs
sys
dont
write
bytecode
variable
python
code
change
value
modify
interpreter
behaviour
contributed
neal
norwitz
georg
brandl
encoding
used
standard
input
output
standard
error
specified
setting
pythonioencoding
environment
variable
running
interpreter
value
string
form
encoding
encoding
errorhandler
encoding
part
specifies
encoding
name
e
g
utf
latin
optional
errorhandler
part
specifies
characters
handled
encoding
one
error
ignore
replace
contributed
martin
von
loewis
new
improved
modules
every
release
python
standard
library
received
number
enhancements
bug
fixes
partial
list
notable
changes
sorted
alphabetically
module
name
consult
misc
news
file
source
tree
complete
list
changes
look
subversion
logs
details
asyncore
asynchat
modules
actively
maintained
number
patches
bugfixes
applied
maintained
josiah
carlson
see
issue
one
patch
bsddb
module
also
new
maintainer
jes
cea
avion
package
available
standalone
package
web
page
package
www
jcea
es
programacion
pybsddb
htm
plan
remove
package
standard
library
python
pace
releases
much
frequent
python
bsddb
dbshelve
module
uses
highest
pickling
protocol
available
instead
restricting
protocol
contributed
w
barnes
cgi
module
read
variables
query
string
post
request
makes
possible
use
form
actions
urls
include
query
strings
cgi
bin
add
py
category
contributed
alexandre
fiori
nubis
issue
parse
qs
parse
qsl
functions
relocated
cgi
module
urlparse
module
versions
still
available
cgi
module
trigger
pendingdeprecationwarning
messages
issue
cmath
module
underwent
extensive
revision
contributed
mark
dickinson
christian
heimes
five
new
functions
added
polar
converts
complex
number
polar
form
returning
modulus
argument
complex
number
rect
opposite
turning
modulus
argument
pair
back
corresponding
complex
number
phase
returns
argument
also
called
angle
complex
number
isnan
returns
true
either
real
imaginary
part
argument
nan
isinf
returns
true
either
real
imaginary
part
argument
infinite
revisions
also
improved
numerical
soundness
cmath
module
functions
real
imaginary
parts
results
accurate
within
units
least
precision
ulps
whenever
possible
see
issue
details
branch
cuts
asinh
atanh
atan
also
corrected
tests
module
greatly
expanded
nearly
new
test
cases
exercise
algebraic
functions
ieee
platforms
cmath
module
handles
ieee
special
values
floating
point
exceptions
manner
consistent
annex
g
c
standard
new
data
type
collections
module
namedtuple
typename
fieldnames
factory
function
creates
subclasses
standard
tuple
whose
fields
accessible
name
well
index
example
var
type
collections
namedtuple
variable
id
name
type
size
names
separated
spaces
commas
id
name
type
size
would
also
work
var
type
fields
id
name
type
size
var
var
type
frequency
int
print
var
var
id
equivalent
print
var
var
type
equivalent
int
int
var
asdict
size
type
int
id
name
frequency
v
var
replace
name
amplitude
v
variable
id
name
amplitude
type
int
size
several
places
standard
library
returned
tuples
modified
return
namedtuple
instances
example
decimal
tuple
method
returns
named
tuple
sign
digits
exponent
fields
contributed
raymond
hettinger
another
change
collections
module
deque
type
supports
optional
maxlen
parameter
supplied
deque
size
restricted
maxlen
items
adding
items
full
deque
causes
old
items
discarded
collections
import
deque
dq
deque
maxlen
dq
deque
maxlen
dq
append
dq
append
dq
append
dq
deque
maxlen
dq
append
dq
deque
maxlen
contributed
raymond
hettinger
cookie
module
morsel
objects
support
nly
attribute
browsers
cookies
attribute
set
cannot
accessed
manipulated
javascript
code
contributed
arvin
schnell
issue
new
window
method
curses
module
chgat
changes
display
attributes
certain
number
characters
single
line
contributed
fabian
kreutz
boldface
text
starting
x
affecting
rest
line
stdscr
chgat
curses
bold
textbox
class
curses
textpad
module
supports
editing
insert
mode
well
overwrite
mode
insert
mode
enabled
supplying
true
value
insert
mode
parameter
creating
textbox
instance
datetime
module
strftime
methods
support
f
format
code
expands
number
microseconds
object
zero
padded
left
six
places
contributed
skip
montanaro
issue
decimal
module
updated
version
general
decimal
specification
new
features
include
methods
basic
mathematical
functions
exp
log
decimal
exp
decimal
decimal
ln
decimal
decimal
log
decimal
tuple
method
decimal
objects
returns
named
tuple
sign
digits
exponent
fields
implemented
facundo
batista
mark
dickinson
named
tuple
support
added
raymond
hettinger
difflib
module
sequencematcher
class
returns
named
tuples
representing
matches
b
size
attributes
contributed
raymond
hettinger
optional
timeout
parameter
specifying
timeout
measured
seconds
added
ftplib
ftp
class
constructor
well
connect
method
added
facundo
batista
also
ftp
class
storbinary
storlines
take
optional
callback
parameter
called
block
data
data
sent
contributed
phil
schwartz
issue
reduce
built
function
also
available
functools
module
python
builtin
dropped
reduce
available
functools
currently
plans
drop
builtin
x
series
patched
christian
heimes
issue
possible
getpass
module
use
dev
tty
print
prompt
message
read
password
falling
back
standard
error
standard
input
password
may
echoed
terminal
warning
printed
prompt
displayed
contributed
gregory
p
smith
glob
glob
function
return
unicode
filenames
unicode
path
used
unicode
filenames
matched
within
directory
issue
new
function
heapq
module
merge
iter
iter
takes
number
iterables
returning
data
sorted
order
returns
new
generator
returns
contents
iterators
also
sorted
order
example
list
heapq
merge
another
new
function
heappushpop
heap
item
pushes
item
onto
heap
pops
returns
smallest
item
efficient
making
call
heappush
heappop
heapq
implemented
use
less
comparison
instead
less
equal
comparison
previously
used
makes
heapq
usage
type
match
list
sort
method
contributed
raymond
hettinger
optional
timeout
parameter
specifying
timeout
measured
seconds
added
ib
onnection
connection
class
constructors
added
facundo
batista
inspect
module
functions
getmoduleinfo
getargs
return
named
tuples
addition
behaving
like
tuples
elements
return
value
also
accessed
attributes
contributed
raymond
hettinger
new
functions
module
include
isgenerator
isgeneratorfunction
isabstract
itertools
module
gained
several
new
functions
izip
longest
iter
iter
fillvalue
makes
tuples
elements
iterables
shorter
others
missing
values
set
fillvalue
example
tuple
itertools
izip
longest
none
none
product
iter
iter
repeat
n
returns
cartesian
product
supplied
iterables
set
tuples
containing
every
possible
combination
elements
returned
iterable
list
itertools
product
optional
repeat
keyword
argument
used
taking
product
iterable
set
iterables
repeated
n
times
single
iterable
argument
n
tuples
returned
list
itertools
product
repeat
two
iterables
n
tuples
returned
list
itertools
product
repeat
combinations
iterable
r
returns
sub
sequences
length
r
elements
iterable
list
itertools
combinations
list
itertools
combinations
list
itertools
combinations
permutations
iter
r
returns
permutations
length
r
iterable
elements
r
specified
default
number
elements
produced
iterable
list
itertools
permutations
itertools
chain
iterables
existing
function
itertools
gained
new
constructor
python
itertools
chain
iterable
iterable
takes
single
iterable
return
iterables
chain
return
elements
first
iterable
elements
second
list
itertools
chain
iterable
contributed
raymond
hettinger
logging
module
filehandler
class
subclasses
watchedfilehandler
rotatingfilehandler
timedrotatingfilehandler
optional
delay
parameter
constructors
delay
true
opening
log
file
deferred
first
emit
call
made
contributed
vinay
sajip
timedrotatingfilehandler
also
utc
constructor
parameter
argument
true
utc
time
used
determining
midnight
occurs
generating
filenames
otherwise
local
time
used
several
new
functions
added
math
module
isinf
isnan
determine
whether
given
float
positive
negative
infinity
nan
number
respectively
copysign
copies
sign
bit
ieee
number
returning
absolute
value
x
combined
sign
bit
example
math
copysign
returns
contributed
christian
heimes
factorial
computes
factorial
number
contributed
raymond
hettinger
issue
fsum
adds
stream
numbers
iterable
careful
avoid
loss
precision
using
partial
sums
contributed
jean
brouwers
raymond
hettinger
mark
dickinson
issue
acosh
asinh
atanh
compute
inverse
hyperbolic
functions
log
p
returns
natural
logarithm
x
base
e
trunc
rounds
number
toward
zero
returning
closest
integral
function
argument
zero
added
part
backport
pep
type
hierarchy
numbers
math
module
improved
give
consistent
behaviour
across
platforms
especially
respect
handling
floating
point
exceptions
ieee
special
values
whenever
possible
module
follows
recommendations
c
standard
special
values
example
sqrt
give
valueerror
across
almost
platforms
sqrt
float
nan
return
nan
ieee
platforms
annex
f
c
standard
recommends
signaling
divide
zero
invalid
python
raise
valueerror
annex
f
c
standard
recommends
signaling
overflow
python
raise
overflowerror
see
issue
issue
contributed
christian
heimes
mark
dickinson
mmap
objects
rfind
method
searches
substring
beginning
end
string
searching
backwards
find
method
also
gained
end
parameter
giving
index
stop
searching
contributed
john
lenton
operator
module
gained
methodcaller
function
takes
name
optional
set
arguments
returning
callable
call
named
function
arguments
passed
example
equivalent
lambda
replace
old
new
replacer
operator
methodcaller
replace
old
new
replacer
old
wine
old
bottles
new
wine
new
bottles
contributed
georg
brandl
suggestion
gregory
petrosyan
attrgetter
function
accepts
dotted
names
performs
corresponding
attribute
lookups
inst
name
operator
attrgetter
class
name
inst
name
str
inst
name
help
helper
contributed
georg
brandl
suggestion
barry
warsaw
os
module
wraps
several
new
system
calls
fchmod
fd
mode
fchown
fd
uid
gid
change
mode
ownership
opened
file
lchmod
path
mode
changes
mode
symlink
contributed
georg
brandl
christian
heimes
chflags
lchflags
wrappers
corresponding
system
calls
available
changing
flags
set
file
constants
flag
values
defined
stat
module
possible
values
include
uf
immutable
signal
file
may
changed
uf
append
indicate
data
appended
file
contributed
levinson
os
closerange
low
high
efficiently
closes
file
descriptors
low
high
ignoring
errors
including
high
function
used
subprocess
module
make
starting
processes
faster
contributed
georg
brandl
issue
os
environ
object
clear
method
unset
environment
variables
using
os
unsetenv
addition
clearing
object
keys
contributed
martin
horcicka
issue
os
walk
function
followlinks
parameter
set
true
follow
symlinks
pointing
directories
visit
directory
contents
backward
compatibility
parameter
default
value
false
note
function
fall
infinite
recursion
symlink
points
parent
directory
issue
os
path
module
splitext
function
changed
split
leading
period
characters
produces
better
results
operating
unix
dot
files
example
os
path
splitext
ipython
returns
ipython
instead
ipython
issue
new
function
os
path
relpath
path
start
returns
relative
path
start
path
supplied
current
working
directory
destination
path
contributed
richard
barran
issue
windows
os
path
expandvars
expand
environment
variables
given
form
var
user
expanded
user
home
directory
path
contributed
josiah
carlson
issue
python
debugger
provided
pdb
module
gained
new
command
run
restarts
python
program
debugged
optionally
take
new
command
line
arguments
program
contributed
rocky
bernstein
issue
pdb
post
mortem
function
used
begin
debugging
traceback
use
traceback
returned
sys
exc
info
traceback
supplied
contributed
facundo
batista
issue
pickletools
module
optimize
function
takes
string
containing
pickle
removes
unused
opcodes
returning
shorter
pickle
contains
data
structure
contributed
raymond
hettinger
get
data
function
added
pkgutil
module
returns
contents
resource
files
included
installed
python
package
example
import
pkgutil
print
pkgutil
get
data
test
exception
hierarchy
txt
baseexception
systemexit
keyboardinterrupt
generatorexit
exception
stopiteration
standarderror
contributed
paul
moore
issue
pyexpat
module
parser
objects
allow
setting
buffer
size
attribute
change
size
buffer
used
hold
character
data
contributed
achim
gaedke
issue
queue
module
provides
queue
variants
retrieve
entries
different
orders
priorityqueue
class
stores
queued
items
heap
retrieves
priority
order
lifoqueue
retrieves
recently
added
entries
first
meaning
behaves
like
stack
contributed
raymond
hettinger
random
module
random
objects
pickled
bit
system
unpickled
bit
system
vice
versa
unfortunately
change
also
means
python
random
objects
unpickled
correctly
earlier
versions
python
contributed
shawn
ligocki
issue
new
triangular
low
high
mode
function
returns
random
numbers
following
triangular
distribution
returned
values
low
high
including
high
mode
frequently
occurring
value
distribution
contributed
wladmir
van
der
laan
raymond
hettinger
issue
long
regular
expression
searches
carried
module
check
signals
delivered
time
consuming
searches
interrupted
contributed
josh
hoyt
ralf
schmitt
issue
regular
expression
module
implemented
compiling
bytecodes
tiny
regex
specific
virtual
machine
untrusted
code
could
create
malicious
strings
bytecode
directly
cause
crashes
python
includes
verifier
regex
bytecode
contributed
guido
van
rossum
work
google
app
engine
issue
rlcompleter
module
completer
complete
method
ignore
exceptions
triggered
evaluating
name
fixed
lorenz
quack
issue
sched
module
scheduler
instances
read
queue
attribute
returns
contents
scheduler
queue
represented
list
named
tuples
fields
time
priority
action
argument
contributed
raymond
hettinger
issue
select
module
wrapper
functions
linux
epoll
bsd
kqueue
system
calls
modify
method
added
existing
poll
objects
pollobj
modify
fd
eventmask
takes
file
descriptor
file
object
event
mask
modifying
recorded
event
mask
file
contributed
christian
heimes
issue
shutil
copytree
function
optional
ignore
argument
takes
callable
object
callable
receive
directory
path
list
directory
contents
returns
list
names
ignored
copied
shutil
module
also
provides
ignore
patterns
function
use
new
parameter
ignore
patterns
takes
arbitrary
number
glob
style
patterns
returns
callable
ignore
files
directories
match
patterns
following
example
copies
directory
tree
skips
svn
directories
emacs
backup
files
names
ending
shutil
copytree
doc
library
tmp
library
ignore
shutil
ignore
patterns
svn
contributed
tarek
ziad
issue
integrating
signal
handling
gui
handling
event
loops
like
used
tkinter
gtk
long
problem
software
ends
polling
waking
every
fraction
second
check
gui
events
occurred
signal
module
make
efficient
calling
signal
set
wakeup
fd
fd
sets
file
descriptor
used
signal
received
byte
written
file
descriptor
also
c
level
function
pysignal
setwakeupfd
setting
descriptor
event
loops
use
opening
pipe
create
two
descriptors
one
reading
one
writing
writable
descriptor
passed
set
wakeup
fd
readable
descriptor
added
list
descriptors
monitored
event
loop
via
select
poll
receiving
signal
byte
written
main
event
loop
woken
avoiding
need
poll
contributed
adam
olsen
issue
siginterrupt
function
available
python
code
allows
changing
whether
signals
interrupt
system
calls
contributed
ralf
schmitt
setitimer
getitimer
functions
also
added
available
setitimer
allows
setting
interval
timers
cause
signal
delivered
process
specified
time
measured
wall
clock
time
consumed
process
time
combined
process
system
time
contributed
guilherme
polo
issue
smtplib
module
supports
smtp
ssl
thanks
addition
smtp
ssl
class
class
supports
interface
identical
existing
smtp
class
contributed
monty
taylor
class
constructors
also
optional
timeout
parameter
specifies
timeout
initial
connection
attempt
measured
seconds
contributed
facundo
batista
implementation
lmtp
protocol
rfc
also
added
module
lmtp
used
place
smtp
transferring
e
mail
agents
manage
mail
queue
lmtp
implemented
leif
hedstrom
issue
smtp
starttls
complies
rfc
forgets
knowledge
obtained
server
obtained
tls
negotiation
patch
contributed
bill
fenner
issue
socket
module
supports
tipc
high
performance
non
ip
based
protocol
designed
use
clustered
environments
tipc
addresses
tuples
contributed
alberto
bertogli
issue
new
function
create
connection
takes
address
connects
using
optional
timeout
value
returning
connected
socket
object
function
also
looks
address
type
connects
using
ipv
ipv
appropriate
changing
code
use
create
connection
instead
socket
socket
af
inet
may
required
make
code
work
ipv
base
classes
socketserver
module
support
calling
handle
timeout
method
span
inactivity
specified
server
timeout
attribute
contributed
michael
pomraning
serve
forever
method
takes
optional
poll
interval
measured
seconds
controlling
often
server
check
shutdown
request
contributed
pedro
werneck
jeffrey
yasskin
issue
issue
sqlite
module
maintained
gerhard
haering
updated
version
python
version
struct
module
supports
c
bool
type
using
format
character
contributed
david
remahl
popen
objects
provided
subprocess
module
terminate
kill
send
signal
methods
windows
send
signal
supports
sigterm
signal
methods
aliases
win
api
function
terminateprocess
contributed
christian
heimes
new
variable
sys
module
float
info
object
containing
information
derived
float
h
file
platform
floating
point
support
attributes
object
include
mant
dig
number
digits
mantissa
epsilon
smallest
difference
next
largest
value
representable
several
others
contributed
christian
heimes
issue
another
new
variable
dont
write
bytecode
controls
whether
python
writes
pyc
pyo
files
importing
module
variable
true
compiled
files
written
variable
initially
set
start
supplying
b
switch
python
interpreter
setting
pythondontwritebytecode
environment
variable
running
interpreter
python
code
subsequently
change
value
variable
control
whether
bytecode
files
written
contributed
neal
norwitz
georg
brandl
information
command
line
arguments
supplied
python
interpreter
available
reading
attributes
named
tuple
available
sys
flags
example
verbose
attribute
true
python
executed
verbose
mode
debug
true
debugging
mode
etc
attributes
read
contributed
christian
heimes
new
function
getsizeof
takes
python
object
returns
amount
memory
used
object
measured
bytes
built
objects
return
correct
results
third
party
extensions
may
define
sizeof
method
return
object
size
contributed
robert
schuppenies
issue
possible
determine
current
profiler
tracer
functions
calling
sys
getprofile
sys
gettrace
contributed
georg
brandl
issue
tarfile
module
supports
posix
pax
tarfiles
addition
posix
ustar
gnu
tar
formats
already
supported
default
format
gnu
tar
specify
format
parameter
open
file
using
different
format
tar
tarfile
open
output
tar
w
format
tarfile
pax
format
new
encoding
errors
parameters
specify
encoding
error
handling
scheme
character
conversions
strict
ignore
replace
three
standard
ways
python
handle
errors
utf
special
value
replaces
bad
characters
utf
representation
character
conversions
occur
pax
format
supports
unicode
filenames
defaulting
utf
encoding
tarfile
add
method
accepts
exclude
argument
function
used
exclude
certain
filenames
archive
function
must
take
filename
return
true
file
excluded
false
archived
function
applied
name
initially
passed
add
names
files
recursively
added
directories
changes
contributed
lars
gust
bel
optional
timeout
parameter
added
telnetlib
telnet
class
constructor
specifying
timeout
measured
seconds
added
facundo
batista
tempfile
namedtemporaryfile
class
usually
deletes
temporary
file
created
file
closed
behaviour
changed
passing
delete
false
constructor
contributed
damien
miller
issue
new
class
spooledtemporaryfile
behaves
like
temporary
file
stores
data
memory
maximum
size
exceeded
reaching
limit
contents
written
disk
temporary
file
contributed
dustin
j
mitchell
namedtemporaryfile
spooledtemporaryfile
classes
work
context
managers
write
tempfile
namedtemporaryfile
tmp
contributed
alexander
belopolsky
issue
test
test
support
module
gained
number
context
managers
useful
writing
tests
environmentvarguard
context
manager
temporarily
changes
environment
variables
automatically
restores
old
values
another
context
manager
transientresource
surround
calls
resources
may
may
available
catch
ignore
specified
list
exceptions
example
network
test
may
ignore
certain
failures
connecting
external
web
site
test
support
transientresource
ioerror
errno
errno
etimedout
f
urllib
urlopen
finally
check
warnings
resets
warning
module
warning
filters
returns
object
record
warning
messages
triggered
issue
test
support
check
warnings
wrec
warnings
simplefilter
always
code
triggers
warning
assert
str
wrec
message
function
outdated
assert
len
wrec
warnings
multiple
warnings
raised
contributed
brett
cannon
textwrap
module
preserve
existing
whitespace
beginnings
ends
newly
created
lines
specifying
drop
whitespace
false
argument
sentence
bunch
extra
whitespace
print
textwrap
fill
width
sentence
bunch
extra
whitespace
print
textwrap
fill
drop
whitespace
false
width
sentence
bunch
extra
whitespace
contributed
dwayne
bailey
issue
threading
module
api
changed
use
properties
daemon
instead
setdaemon
isdaemon
methods
methods
renamed
use
underscores
instead
camel
case
example
activecount
method
renamed
active
count
versions
module
support
properties
renamed
methods
remove
old
methods
date
set
deprecation
old
apis
python
x
old
apis
removed
x
version
carried
several
people
notably
benjamin
peterson
threading
module
thread
objects
gained
ident
property
returns
thread
identifier
nonzero
integer
contributed
gregory
p
smith
issue
timeit
module
accepts
callables
well
strings
statement
timed
setup
code
two
convenience
functions
added
creating
timer
instances
repeat
stmt
setup
time
repeat
number
timeit
stmt
setup
time
number
create
instance
call
corresponding
method
contributed
erik
demaine
issue
tkinter
module
accepts
lists
tuples
options
separating
elements
spaces
passing
resulting
value
tcl
tk
contributed
guilherme
polo
issue
turtle
module
turtle
graphics
greatly
enhanced
gregor
lingl
new
features
module
include
better
animation
turtle
movement
rotation
control
turtle
movement
using
new
delay
tracer
speed
methods
ability
set
new
shapes
turtle
define
new
coordinate
system
turtles
undo
method
roll
back
actions
simple
support
reacting
input
events
mouse
keyboard
activity
making
possible
write
simple
games
turtle
cfg
file
used
customize
starting
appearance
turtle
screen
module
docstrings
replaced
new
docstrings
translated
another
language
issue
optional
timeout
parameter
added
urllib
urlopen
function
urllib
ftpwrapper
class
constructor
well
urllib
urlopen
function
parameter
specifies
timeout
measured
seconds
example
u
urllib
urlopen
timeout
traceback
recent
call
last
urllib
urlerror
urlopen
error
timed
added
facundo
batista
unicode
database
provided
unicodedata
module
updated
version
updated
martin
von
loewis
issue
warnings
module
formatwarning
showwarning
gained
optional
line
argument
used
supply
line
source
code
added
part
issue
implemented
part
warnings
module
c
code
new
function
catch
warnings
context
manager
intended
testing
purposes
lets
temporarily
modify
warning
filters
restore
original
values
issue
xml
rpc
simplexmlrpcserver
docxmlrpcserver
classes
prevented
immediately
opening
binding
socket
passing
true
bind
activate
constructor
parameter
used
modify
instance
allow
reuse
address
attribute
calling
server
bind
server
activate
methods
open
socket
begin
listening
connections
contributed
peter
parente
issue
simplexmlrpcserver
also
send
traceback
header
attribute
true
exception
formatted
traceback
returned
headers
x
exception
x
traceback
feature
debugging
purposes
used
production
servers
tracebacks
might
reveal
passwords
sensitive
information
contributed
alan
mcintyre
part
project
google
summer
code
xmlrpclib
module
longer
automatically
converts
datetime
date
datetime
time
xmlrpclib
datetime
type
conversion
semantics
necessarily
correct
applications
code
using
xmlrpclib
convert
date
time
instances
issue
code
also
handle
dates
contributed
ralf
schmitt
issue
bit
integers
represented
using
xml
rpc
responses
contributed
riku
lindblad
issue
zipfile
module
zipfile
class
extract
extractall
methods
unpack
single
file
files
archive
current
directory
specified
directory
z
zipfile
zipfile
python
zip
unpack
single
file
writing
relative
tmp
directory
z
extract
python
sysmodule
c
tmp
unpack
files
archive
z
extractall
contributed
alan
mcintyre
issue
open
read
extract
methods
take
either
filename
zipinfo
object
useful
archive
accidentally
contains
duplicated
filename
contributed
graham
horler
issue
finally
zipfile
supports
using
unicode
filenames
archived
files
contributed
alexey
borzenkov
issue
ast
module
ast
module
provides
abstract
syntax
tree
representation
python
code
armin
ronacher
contributed
set
helper
functions
perform
variety
common
tasks
useful
html
templating
packages
code
analyzers
similar
tools
process
python
code
parse
function
takes
expression
returns
ast
dump
function
outputs
representation
tree
suitable
debugging
import
ast
ast
parse
abcdefghijklm
ord
ord
print
print
ast
dump
outputs
deeply
nested
tree
module
body
assign
targets
name
id
ctx
store
value
dict
keys
values
target
name
id
ctx
store
iter
str
abcdefghijklm
body
assign
targets
subscript
value
name
id
ctx
load
slice
index
value
binop
left
name
id
ctx
load
op
add
right
name
id
ctx
load
ctx
store
value
binop
left
binop
left
call
func
name
id
ord
ctx
load
args
name
id
ctx
load
keywords
starargs
none
kwargs
none
op
sub
right
call
func
name
id
ord
ctx
load
args
str
keywords
starargs
none
kwargs
none
op
add
right
num
n
orelse
print
dest
none
values
name
id
ctx
load
nl
true
literal
eval
method
takes
string
ast
representing
literal
expression
parses
evaluates
returns
resulting
value
literal
expression
python
expression
containing
strings
numbers
dictionaries
etc
statements
function
calls
need
evaluate
expression
cannot
accept
security
risk
using
eval
call
literal
eval
handle
safely
literal
b
print
ast
literal
eval
literal
b
print
ast
literal
eval
b
traceback
recent
call
last
valueerror
malformed
string
module
also
includes
nodevisitor
nodetransformer
classes
traversing
modifying
ast
functions
common
transformations
changing
line
numbers
future
builtins
module
python
makes
many
changes
repertoire
built
functions
changes
introduced
python
x
series
would
break
compatibility
future
builtins
module
provides
versions
built
functions
imported
writing
compatible
code
functions
module
currently
include
ascii
obj
equivalent
repr
python
repr
return
unicode
string
ascii
return
pure
ascii
bytestring
filter
predicate
iterable
map
func
iterable
versions
return
iterators
unlike
x
builtins
return
lists
hex
value
oct
value
instead
calling
hex
oct
methods
versions
call
index
method
convert
result
hexadecimal
octal
oct
use
new
notation
result
json
module
javascript
object
notation
new
json
module
supports
encoding
decoding
python
types
json
javascript
object
notation
json
lightweight
interchange
format
often
used
web
applications
information
json
see
json
comes
support
decoding
encoding
built
python
types
following
example
encodes
decodes
dictionary
import
json
data
spam
foo
parrot
json
json
dumps
data
encode
data
json
parrot
spam
foo
json
loads
json
decode
python
object
spam
foo
parrot
also
possible
write
decoders
encoders
support
types
pretty
printing
json
strings
also
supported
json
originally
called
simplejson
written
bob
ippolito
plistlib
module
property
list
parser
plist
format
commonly
used
mac
os
x
store
basic
data
types
numbers
strings
lists
dictionaries
serializing
xml
based
format
resembles
xml
rpc
serialization
data
types
despite
primarily
used
mac
os
x
format
nothing
mac
specific
python
implementation
works
platform
python
supports
plistlib
module
promoted
standard
library
using
module
simple
import
sys
import
plistlib
import
datetime
create
data
structure
data
struct
dict
lastaccessed
datetime
datetime
version
categories
personal
shared
private
create
string
containing
xml
plist
str
plistlib
writeplisttostring
data
struct
new
struct
plistlib
readplistfromstring
plist
str
print
data
struct
print
new
struct
write
data
structure
file
read
back
plistlib
writeplist
data
struct
tmp
customizations
plist
new
struct
plistlib
readplist
tmp
customizations
plist
read
writeplist
accepts
file
like
objects
well
paths
plistlib
writeplist
data
struct
sys
stdout
ctypes
enhancements
thomas
heller
continued
maintain
enhance
ctypes
module
ctypes
supports
c
bool
datatype
represents
c
bool
type
contributed
david
remahl
issue
ctypes
string
buffer
array
types
improved
support
extended
slicing
syntax
various
combinations
start
stop
step
supplied
implemented
thomas
wouters
ctypes
data
types
support
buffer
buffer
copy
methods
create
ctypes
instance
based
provided
buffer
object
buffer
copy
copies
contents
object
buffer
share
memory
area
new
calling
convention
tells
ctypes
clear
errno
win
lasterror
variables
outset
wrapped
call
implemented
thomas
heller
issue
retrieve
unix
errno
variable
function
call
creating
wrapped
function
supply
use
errno
true
keyword
parameter
dll
function
call
module
level
methods
set
errno
get
errno
set
retrieve
error
value
win
lasterror
variable
similarly
supported
dll
oledll
windll
functions
supply
use
last
error
true
keyword
parameter
call
module
level
methods
set
last
error
get
last
error
byref
function
used
retrieve
pointer
ctypes
instance
optional
offset
parameter
byte
count
added
returned
pointer
improved
ssl
support
bill
janssen
made
extensive
improvements
python
support
secure
sockets
layer
adding
new
module
ssl
built
atop
openssl
library
new
module
provides
control
protocol
negotiated
x
certificates
used
better
support
writing
ssl
servers
opposed
clients
python
existing
ssl
support
socket
module
removed
continues
work
though
removed
python
use
new
module
must
first
create
tcp
connection
usual
way
pass
ssl
wrap
socket
function
possible
specify
whether
certificate
required
obtain
certificate
info
calling
getpeercert
method
see
also
documentation
ssl
module
deprecations
removals
string
exceptions
removed
attempting
use
raises
typeerror
changes
exception
interface
dictated
pep
continue
made
message
attribute
deprecated
favor
args
attribute
warning
mode
python
feature
reorganized
standard
library
drop
many
outdated
modules
rename
others
python
running
warning
mode
warn
modules
imported
list
deprecated
modules
audiodev
bgenlocations
buildtools
bundlebuilder
canvas
compiler
dircache
dl
fpformat
gensuitemodule
ihooks
imageop
imgfile
linuxaudiodev
mhlib
mimetools
multifile
new
pure
statvfs
sunaudiodev
test
testall
toaiff
gopherlib
module
removed
mimewriter
module
mimify
module
deprecated
use
email
package
instead
md
module
deprecated
use
hashlib
module
instead
posixfile
module
deprecated
fcntl
lockf
provides
better
locking
popen
module
deprecated
use
subprocess
module
rgbimg
module
removed
sets
module
deprecated
better
use
built
set
frozenset
types
sha
module
deprecated
use
hashlib
module
instead
build
c
api
changes
changes
python
build
process
c
api
include
python
must
compiled
c
compilers
years
means
python
source
tree
dropped
implementations
memmove
strerror
c
standard
library
python
built
microsoft
visual
studio
version
new
default
compiler
see
pcbuild
directory
build
files
implemented
christian
heimes
mac
os
x
python
compiled
way
universal
build
configure
script
take
universal
archs
bit
bit
switch
controlling
whether
binaries
built
bit
architectures
x
powerpc
bit
x
ppc
contributed
ronald
oussoren
new
function
added
python
pysys
setargvex
sets
value
sys
argv
optionally
update
sys
path
include
directory
containing
script
named
sys
argv
depending
value
updatepath
parameter
function
added
close
security
hole
applications
embed
python
old
function
pysys
setargv
would
always
update
sys
path
sometimes
would
add
current
directory
meant
ran
application
embedding
python
directory
controlled
someone
else
attackers
could
put
trojan
horse
module
directory
say
file
named
os
py
application
would
import
run
maintain
c
c
application
embeds
python
check
whether
calling
pysys
setargv
carefully
consider
whether
application
using
pysys
setargvex
updatepath
set
false
note
using
function
break
compatibility
python
versions
earlier
continue
working
earlier
versions
leave
call
pysys
setargv
alone
call
pyrun
simplestring
sys
path
pop
n
afterwards
discard
first
sys
path
component
security
issue
reported
cve
discussed
issue
fixed
antoine
pitrou
berkeleydb
module
c
api
object
available
bsddb
db
api
object
used
c
extensions
wish
use
bsddb
module
purposes
contributed
duncan
grisby
new
buffer
interface
previously
described
pep
section
adds
pyobject
getbuffer
pybuffer
release
well
functions
python
use
c
stdio
library
thread
safe
least
thread
safe
underlying
library
long
standing
potential
bug
occurred
one
thread
closed
file
object
another
thread
reading
writing
object
file
objects
reference
count
manipulated
pyfile
incusecount
pyfile
decusecount
functions
file
objects
closed
unless
reference
count
zero
pyfile
incusecount
called
gil
still
held
carrying
operation
using
file
pointer
pyfile
decusecount
called
immediately
gil
acquired
contributed
antoine
pitrou
gregory
p
smith
importing
modules
simultaneously
two
different
threads
longer
deadlocks
raise
importerror
new
api
function
pyimport
importmodulenoblock
look
module
sys
modules
first
try
import
acquiring
import
lock
import
lock
held
another
thread
importerror
raised
contributed
christian
heimes
several
functions
return
information
platform
floating
point
support
pyfloat
getmax
returns
maximum
representable
floating
point
value
pyfloat
getmin
returns
minimum
positive
value
pyfloat
getinfo
returns
object
containing
information
float
h
file
mant
dig
number
digits
mantissa
epsilon
smallest
difference
next
largest
value
representable
several
others
contributed
christian
heimes
issue
c
functions
methods
use
pycomplex
asccomplex
accept
arguments
complex
method
particular
functions
cmath
module
accept
objects
method
backport
python
change
contributed
mark
dickinson
issue
python
c
api
includes
two
functions
case
insensitive
string
comparisons
pyos
stricmp
char
char
pyos
strnicmp
char
char
py
ssize
contributed
christian
heimes
issue
many
c
extensions
define
little
macro
adding
integers
strings
module
dictionary
init
function
python
finally
defines
standard
macros
adding
values
module
pymodule
addstringmacro
pymodule
addintmacro
contributed
christian
heimes
macros
renamed
make
clearer
macros
functions
py
size
became
py
size
py
type
became
py
type
py
refcnt
became
py
refcnt
mixed
case
macros
still
available
python
backward
compatibility
issue
distutils
places
c
extensions
builds
different
directory
running
debug
version
python
contributed
collin
winter
issue
several
basic
data
types
integers
strings
maintain
internal
free
lists
objects
used
data
structures
free
lists
follow
naming
convention
variable
always
named
free
list
counter
always
named
numfree
macro
py
typename
maxfreelist
always
defined
new
makefile
target
make
patchcheck
prepares
python
source
tree
making
patch
fixes
trailing
whitespace
modified
py
files
checks
whether
documentation
changed
reports
whether
misc
acks
misc
news
files
updated
contributed
brett
cannon
another
new
target
make
profile
opt
compiles
python
binary
using
gcc
profile
guided
optimization
compiles
python
profiling
enabled
runs
test
suite
obtain
set
profiling
results
compiles
using
results
optimization
contributed
gregory
p
smith
port
specific
changes
windows
support
windows
nt
dropped
python
requires
least
windows
sp
new
default
compiler
windows
visual
studio
version
build
directories
visual
studio
version
version
moved
pc
directory
new
pcbuild
directory
supports
cross
compilation
x
debug
builds
profile
guided
optimization
pgo
pgo
builds
roughly
faster
normal
builds
contributed
christian
heimes
help
amaury
forgeot
arc
martin
von
loewis
msvcrt
module
supports
normal
wide
char
variants
console
api
getwch
function
reads
keypress
returns
unicode
value
getwche
function
putwch
function
takes
unicode
character
writes
console
contributed
christian
heimes
os
path
expandvars
expand
environment
variables
form
var
user
expanded
user
home
directory
path
contributed
josiah
carlson
issue
socket
module
socket
objects
ioctl
method
provides
limited
interface
wsaioctl
system
interface
winreg
module
function
expandenvironmentstrings
expands
environment
variable
references
name
input
string
handle
objects
provided
module
support
context
protocol
used
statements
contributed
christian
heimes
winreg
also
better
support
x
systems
exposing
disablereflectionkey
enablereflectionkey
queryreflectionkey
functions
enable
disable
registry
reflection
bit
processes
running
bit
systems
issue
msilib
module
record
object
gained
getinteger
getstring
methods
return
field
values
integer
string
contributed
floris
bruynooghe
issue
port
specific
changes
mac
os
x
compiling
framework
build
python
specify
framework
name
used
providing
framework
name
option
configure
script
macfs
module
removed
turn
required
macostools
touched
function
removed
depended
macfs
module
issue
many
mac
os
modules
deprecated
removed
python
builtinsuites
aepack
aetools
aetypes
applesingle
appletrawmain
appletrunner
argvemulator
audio
mac
autogil
carbon
cfmfile
codewarrior
colorpicker
easydialogs
explorer
finder
framework
findertools
ic
icglue
icopen
macerrors
macos
macfs
macostools
macresource
miniaeframe
nav
netscape
osaterminology
pimp
pixmapwrapper
stdsuites
systemevents
terminal
terminalcommand
port
specific
changes
irix
number
old
irix
specific
modules
deprecated
removed
python
al
al
cd
cddb
cdplayer
cl
cl
device
errno
file
fl
fl
flp
fm
get
glws
gl
gl
ioctl
jpeg
panelparser
readcd
sv
sv
torgb
videoreader
wait
porting
python
section
lists
previously
described
changes
bugfixes
may
require
changes
code
classes
supposed
hashable
set
hash
none
definitions
indicate
fact
string
exceptions
removed
attempting
use
raises
typeerror
init
method
collections
deque
clears
existing
contents
deque
adding
elements
iterable
change
makes
behavior
match
list
init
object
init
previously
accepted
arbitrary
arguments
keyword
arguments
ignoring
python
longer
allowed
result
typeerror
affect
init
methods
end
calling
corresponding
method
object
perhaps
using
super
see
issue
discussion
decimal
constructor
accepts
leading
trailing
whitespace
passed
string
previously
would
raise
invalidoperation
exception
hand
create
decimal
method
context
objects
explicitly
disallows
extra
whitespace
raising
conversionsyntax
exception
due
implementation
accident
passed
file
path
built
import
function
would
actually
import
specified
file
never
intended
work
however
implementation
explicitly
checks
case
raises
importerror
c
api
pyimport
import
pyimport
importmodule
functions
default
absolute
imports
relative
imports
affect
c
extensions
import
modules
c
api
extension
data
types
hashable
define
tp
hash
slot
pyobject
hashnotimplemented
socket
module
exception
socket
error
inherits
ioerror
previously
subclass
standarderror
ioerror
implemented
gregory
p
smith
issue
xmlrpclib
module
longer
automatically
converts
datetime
date
datetime
time
xmlrpclib
datetime
type
conversion
semantics
necessarily
correct
applications
code
using
xmlrpclib
convert
date
time
instances
issue
warning
mode
exception
class
warns
accessed
using
slicing
index
access
exception
behave
like
tuple
phased
warning
mode
inequality
comparisons
two
dictionaries
two
objects
implement
comparison
methods
reported
warnings
dict
dict
still
works
dict
dict
phased
comparisons
cells
implementation
detail
python
scoping
rules
also
cause
warnings
comparisons
forbidden
entirely
applications
embed
python
pysys
setargvex
function
added
python
letting
applications
close
security
hole
existing
pysys
setargv
function
used
check
whether
calling
pysys
setargv
carefully
consider
whether
application
using
pysys
setargvex
updatepath
set
false
acknowledgements
author
would
like
thank
following
people
offering
suggestions
corrections
assistance
various
drafts
article
georg
brandl
steve
brown
nick
coghlan
ralph
corderoy
jim
jewett
kent
johnson
chris
lambacher
martin
michlmayr
antoine
pitrou
brian
warner
table
contents
new
python
python
changes
development
process
new
issue
tracker
roundup
new
documentation
format
restructuredtext
using
sphinx
pep
statement
writing
context
managers
contextlib
module
pep
explicit
relative
imports
main
module
pep
per
user
site
packages
directory
pep
multiprocessing
package
pep
advanced
string
formatting
pep
print
function
pep
exception
handling
changes
pep
byte
literals
pep
new
library
pep
revised
buffer
protocol
pep
abstract
base
classes
pep
integer
literal
support
syntax
pep
class
decorators
pep
type
hierarchy
numbers
fractions
module
language
changes
optimizations
interpreter
changes
new
improved
modules
ast
module
future
builtins
module
json
module
javascript
object
notation
plistlib
module
property
list
parser
ctypes
enhancements
improved
ssl
support
deprecations
removals
build
c
api
changes
port
specific
changes
windows
port
specific
changes
mac
os
x
port
specific
changes
irix
porting
python
acknowledgements
previous
topic
href
index
html
title
previous
chapter
new
python
next
topic
href
html
title
next
chapter
new
python
page
report
bug
href
sources
whatsnew
txt
rel
nofollow
show
source
quick
search
enter
search
terms
module
class
function
name
searchbox
show
navigation
href
genindex
html
title
general
index
index
href
modindex
html
title
global
module
index
modules
href
html
title
new
python
next
href
index
html
title
new
python
previous
img
src
static
py
png
alt
style
vertical
align
middle
margin
top
px
python
python
v
documentation
new
python
copyright
python
software
foundation
python
software
foundation
non
profit
corporation
please
donate
last
updated
oct
found
bug
created
using
sphinx
