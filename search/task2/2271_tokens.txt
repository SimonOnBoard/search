doctype
html
public
w
c
dtd
xhtml
strict
en
dtd
xhtml
strict
dtd
body
margin
top
important
padding
top
important
min
width
px
important
wm
rw
iframe
id
donato
src
platform
wb
referer
web
archive
org
web
python
net
crew
mwh
hacks
objectthink
html
scrolling
frameborder
style
width
height
captures
may
mar
feb
mar
apr
success
fail
id
wm
save
snapshot
open
href
title
share
via
web
archive
href
web
id
wm
screenshot
title
screenshot
capture
collected
organization
alexa
crawls
starting
alexa
internet
donating
crawl
data
internet
archive
flowing
every
day
data
added
wayback
machine
embargo
period
collection
alexa
crawls
starting
alexa
internet
donating
crawl
data
internet
archive
flowing
every
day
data
added
wayback
machine
embargo
period
timestamps
wayback
machine
wm
bt
web
false
wm
rw
think
like
pythonista
archive
part
thread
comp
lang
python
kept
post
links
seems
appropriate
dealt
question
comes
relatively
often
want
read
thread
google
instead
question
answer
alex
answer
satisfied
customer
recent
past
written
april
reference
searcher
enlightenment
posted
following
query
comp
lang
python
hello
one
thing
like
much
python
statements
work
like
would
expect
work
take
example
use
dict
values
dictionaries
store
result
dict
values
change
dictionary
wards
previously
stored
result
remains
untouched
dict
b
list
dict
values
list
dict
list
dict
b
however
dictionary
lists
value
entries
get
counterintuitive
behavior
recently
broke
code
change
dict
list
previously
created
via
dict
values
gets
automagically
updated
nice
feature
nothing
would
expected
dict
b
list
dict
values
list
dict
append
dict
b
list
looks
like
first
case
copy
returned
latter
case
list
references
returned
ok
according
python
philosophy
mind
work
lists
dictionary
anything
else
behavior
depends
knowledge
type
values
put
dictionary
find
somehow
counterintuitive
wrong
intuition
python
intuition
train
thinking
python
execution
model
intuition
get
better
almost
needless
say
poster
intuition
fault
far
unique
sort
misconception
luckily
two
pythonically
experienced
posters
alex
martelli
particularly
pedagogical
mood
day
wrote
lengthy
articles
explaining
rather
different
ways
going
wrong
ranted
thinking
terms
names
objects
bindings
something
enough
drew
ascii
art
diagrams
explaining
going
covers
interactive
sessions
op
confused
one
thing
like
much
python
statements
work
like
would
expect
work
well
python
works
much
expect
clear
says
python
wink
end
email
say
wrong
intuition
python
intuition
train
thinking
python
execution
model
intuition
get
better
read
email
moment
better
way
wasting
time
hand
drawing
ascii
art
first
terminology
actually
first
thing
anti
terminology
find
word
variable
particularly
uphelpful
python
context
prefer
names
bindings
objects
names
look
like
foo
names
live
namespaces
really
important
matter
hand
namespace
play
one
associated
read
eval
print
loop
interpreter
fact
names
minor
players
current
drama
bindings
objects
real
stars
bindings
look
like
bindings
left
ends
attached
names
places
attributes
objects
entries
lists
dictionaries
right
hand
ends
always
attached
objects
objects
look
like
bar
meant
string
bar
types
object
drawn
differently
hope
work
take
example
use
dict
values
dictionaries
store
result
dict
values
change
dictionary
wards
previously
stored
result
remains
untouched
dict
b
statement
would
seem
appropriate
draw
picture
dict
b
list
dict
values
dict
b
list
list
course
surprise
dict
dict
b
list
list
dict
b
also
come
surprise
chase
arrows
bindings
however
dictionary
lists
value
entries
get
counterintuitive
behavior
recently
broke
code
change
dict
list
previously
created
via
dict
values
gets
automagically
updated
nice
feature
nothing
would
expected
thinking
terms
names
objects
bindings
dict
b
dict
b
list
dict
values
dict
b
list
list
surprises
dict
append
dict
b
list
dict
b
list
surprising
either
looks
like
first
case
copy
returned
latter
case
list
references
returned
ok
according
python
philosophy
mind
work
lists
dictionary
anything
else
behavior
depends
knowledge
type
values
put
dictionary
find
somehow
counterintuitive
realised
misconceptions
come
pictures
sure
prose
would
help
cheers
anyone
know
starship
gone
anyone
mentioning
unboundlocalerror
point
shot
martin
luther
nails
theses
church
door
promptly
moderated
flamebait
cid
although
seen
access
email
returned
long
posting
time
wasting
became
normal
might
redraw
diagrams
dia
something
someday
although
probably
email
goes
alex
took
different
wordier
strategy
explaining
python
copy
recounting
nice
anecdote
statue
bologna
suggesting
op
read
borges
calvino
wittgenstein
korzibsky
hello
one
thing
like
much
python
statements
work
like
would
expect
work
take
example
use
dict
values
dictionaries
store
result
dict
values
change
dictionary
wards
previously
stored
result
remains
untouched
values
method
dictionary
defined
return
new
list
values
less
inevitable
since
dictionary
list
value
normally
must
build
fly
ask
copy
new
list
object
however
python
copy
except
situations
copy
specifically
defined
happen
values
method
vague
sense
situation
mentioned
new
object
rather
copy
existing
one
general
whenever
possible
python
returns
references
objects
already
around
rather
copying
want
copy
ask
see
module
copy
want
general
way
course
building
new
objects
different
case
counteintuitive
really
alternative
general
case
without
imposing
huge
overhead
making
copies
everything
case
much
better
get
copies
explicit
request
new
objects
existing
object
could
either
copied
referred
course
cases
slices
standard
sequences
give
new
object
ask
slice
matters
lists
immutable
objects
care
get
copies
list
able
share
part
asked
slice
gives
copy
new
list
generality
course
also
asked
slice
everything
thelist
limit
case
new
object
seen
copy
existing
one
justly
popular
numeric
package
hand
defines
array
type
able
share
data
among
several
array
objects
slice
numeric
array
share
data
array
sliced
new
object
mind
import
numeric
numeric
array
range
b
id
id
b
two
distinct
objects
b
share
data
array
b
array
b
array
behavior
excellent
pragmatics
behind
lists
way
simpler
worry
data
sharing
arrays
different
use
cases
far
hard
unsurprising
two
somewhat
similar
objects
differ
details
copies
happen
e
g
limit
case
list
slicing
whatever
else
one
exception
later
always
shallow
copies
never
python
embark
huge
task
deep
copying
unless
specifically
ask
specifically
function
deepcopy
module
copy
deep
copying
serious
matter
function
deepcopy
watch
cycles
reproduce
identity
references
potentially
follow
references
depth
recursively
reproduce
faithfully
graph
objects
referencing
unbounded
complexity
works
course
never
fast
mundane
business
shallow
copying
turn
never
fast
handing
one
reference
existing
object
whenever
latter
course
action
feasible
apparently
snagged
however
dictionary
lists
value
entries
get
counterintuitive
behavior
recently
broke
code
change
dict
list
previously
created
via
dict
values
gets
automagically
updated
nice
feature
nothing
would
expected
really
change
objects
dict
refers
rather
changing
dict
se
references
objects
remain
references
objects
objects
mutate
see
mutated
objects
whatever
references
may
using
dict
b
list
dict
values
list
use
names
built
types
variables
burned
one
day
dict
list
str
tuple
file
int
long
float
unicode
use
identifiers
purposes
tempting
though
may
attractive
nuisance
sure
get
habit
avoiding
one
day
trying
e
g
build
list
x
list
ciao
get
puzzling
errors
rebound
identifier
list
refer
certain
list
object
rather
list
type
use
alist
somedict
myfile
whatever
nothing
problem
simple
advice
dict
append
change
dictionary
dictionary
object
still
contains
exactly
references
objects
id
two
string
objects
keys
two
list
objects
values
changing
mutating
one
objects
quite
another
issue
could
mutating
said
list
object
reference
whatsoever
e
g
alist
list
ciao
adict
alist
adict
c
alist
pop
adict
c
wanted
dictionary
adict
refer
copy
snapshot
contents
alist
could
said
import
copy
alist
list
ciao
adict
copy
copy
alist
adict
c
alist
pop
adict
c
dictionary
object
string
representation
would
isolated
whatever
changes
list
name
alist
refers
string
representation
delegates
part
job
objects
dictionary
object
refers
want
isolate
need
copies
maybe
deep
ones
fact
shudder
well
really
dict
b
list
looks
like
first
case
copy
returned
latter
case
list
references
returned
ok
nope
always
references
values
return
reference
existing
object
copy
existing
object
existing
object
case
always
returns
new
object
suitably
built
per
specs
according
python
philosophy
mind
work
lists
dictionary
anything
else
behavior
depends
knowledge
type
values
put
dictionary
find
somehow
counterintuitive
dependence
huge
difference
changing
object
changing
mutating
object
first
refers
bologna
years
ago
statue
local
hero
depicted
pointing
forwards
finger
presumably
future
given
exactly
placed
locals
soon
identified
statue
points
hotel
belfiore
one
day
enterprising
developer
bought
hotel
building
restructured
particular
hotel
used
restaurant
da
carlo
statue
points
hotel
belfiore
suddenly
become
statue
points
da
carlo
amazing
considering
marble
fluid
statue
moved
disturbed
way
real
anecdote
way
except
sure
names
hotel
restaurant
involved
could
wrong
think
still
help
dictionary
statue
changed
even
though
objects
refers
points
may
mutated
beyond
recognition
name
people
know
dictionary
string
representation
may
therefore
change
name
representation
referring
non
intrinsic
non
persistent
happenstance
characteristic
statue
dictionary
wrong
intuition
python
intuition
train
thinking
python
execution
model
intuition
get
better
intuition
led
astray
python
trained
several
ways
works
j
l
borges
calvino
like
fiction
reasonably
sophisticated
still
quite
pleasant
good
bets
like
non
fiction
written
engineers
fighting
hard
dispell
errors
philosophers
wittgenstein
korzibsky
excellent
kidding
realize
many
pythonistas
really
care
either
genre
case
group
archives
essays
gvr
f
python
sources
may
also
prove
interesting
reading
alex
essay
f
alex
referring
probably
one
even
still
read
talks
issues
terser
style
prove
point
op
went
away
satisfied
customer
dear
michael
dear
alex
excellent
teachers
michael
helped
really
getting
point
drawings
thanks
lot
art
work
alex
anecdote
statue
pointing
hotel
belfiore
made
wrong
intuition
obvious
like
never
ever
forget
anymore
thanks
answer
think
today
learnt
lot
way
becoming
real
pythoniac
hope
found
answers
useful
well
lucky
catch
mood
alex
writes
articles
like
time
please
send
comments
praise
abuse
etc
mwh
net
want
translate
document
means
feel
free
would
nice
sent
link
translation
far
know
hernan
martinez
foffani
spanish
translation
file
archived
mar
retrieved
internet
archive
feb
javascript
appended
wayback
machine
copyright
internet
archive
content
may
also
protected
copyright
u
c
section
playback
timings
ms
captures
list
exclusion
robots
exclusion
robots
policy
rediscdxsource
esindex
loadshardblock
petaboxloader
datanode
cdxlines
iter
petaboxloader
resolve
load
resource
