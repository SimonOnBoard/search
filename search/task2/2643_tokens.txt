generator
computer
programming
wikipedia
free
encyclopedia
jump
navigation
jump
search
mw
parser
output
hatnote
font
style
italic
mw
parser
output
div
hatnote
padding
left
em
margin
bottom
em
mw
parser
output
hatnote
font
style
normal
mw
parser
output
hatnote
link
hatnote
margin
top
em
uses
see
generator
disambiguation
computing
article
needs
additional
citations
verification
please
help
improve
article
adding
citations
reliable
sources
unsourced
material
may
challenged
removed
find
sources
generator
computer
programming
news
newspapers
books
scholar
jstor
july
learn
remove
template
message
computer
science
generator
routine
used
control
iteration
behaviour
loop
generators
also
iterators
generator
similar
function
returns
array
generator
parameters
called
generates
sequence
values
however
instead
building
array
containing
values
returning
generator
yields
values
one
time
requires
less
memory
allows
caller
get
started
processing
first
values
immediately
short
generator
looks
like
function
behaves
like
iterator
generators
implemented
terms
expressive
control
flow
constructs
coroutines
first
class
continuations
generators
also
known
semicoroutines
special
case
weaker
coroutines
always
yield
control
back
caller
passing
value
back
rather
specifying
coroutine
jump
see
comparison
coroutines
generators
contents
uses
timeline
lisp
clu
icon
c
c
perl
tcl
haskell
racket
php
ruby
java
c
xl
f
python
generator
expressions
ecmascript
r
smalltalk
see
also
notes
references
uses
edit
generators
usually
invoked
inside
loops
first
time
generator
invocation
reached
loop
iterator
object
created
encapsulates
state
generator
routine
beginning
arguments
bound
corresponding
parameters
generator
body
executed
context
iterator
special
yield
action
encountered
time
value
provided
yield
action
used
value
invocation
expression
next
time
generator
invocation
reached
subsequent
iteration
execution
generator
body
resumed
yield
action
yet
another
yield
action
encountered
addition
yield
action
execution
generator
body
also
terminated
finish
action
time
innermost
loop
enclosing
generator
invocation
terminated
complicated
situations
generator
may
used
manually
outside
loop
create
iterator
used
various
ways
generators
compute
yielded
values
demand
useful
representing
streams
sequences
would
expensive
impossible
compute
include
e
g
infinite
sequences
live
data
streams
eager
evaluation
desirable
primarily
sequence
finite
otherwise
evaluation
never
terminate
one
either
convert
list
use
parallel
construction
creates
list
instead
generator
example
python
generator
g
evaluated
list
l
via
l
list
g
f
sequence
expression
seq
evaluates
lazily
generator
sequence
evaluates
eagerly
list
presence
generators
loop
constructs
language
reduced
single
loop
end
loop
construct
usual
loop
constructs
comfortably
simulated
using
suitable
generators
right
way
example
ranged
loop
like
x
implemented
iteration
generator
python
x
range
break
implemented
sending
finish
generator
using
continue
loop
timeline
edit
generators
first
appeared
clu
prominent
feature
string
manipulation
language
icon
available
python
c
ruby
php
later
versions
ecmascript
es
es
languages
clu
c
generators
called
iterators
ruby
enumerators
lisp
edit
final
common
lisp
standard
natively
provide
generators
yet
various
library
implementations
exist
series
documented
cltl
pygen
clu
edit
yield
statement
used
implement
iterators
user
defined
data
abstractions
string
chars
iter
string
yields
char
index
int
limit
int
string
size
index
limit
yield
string
fetch
index
index
index
end
end
string
chars
c
char
string
chars
end
icon
edit
every
expression
including
loops
generator
language
many
generators
built
even
implements
logic
semantics
using
generator
mechanism
logical
disjunction
done
way
printing
squares
achieved
using
co
routine
writing
local
squares
j
squares
create
seq
every
j
squares
j
write
j
else
break
however
time
custom
generators
implemented
suspend
keyword
functions
exactly
like
yield
keyword
clu
c
edit
c
generator
functions
language
construct
subset
coroutines
simple
implement
using
framework
implements
stackful
coroutines
libdill
posix
platforms
cost
context
switching
per
iteration
concern
full
parallelism
rather
merely
concurrency
desired
simple
generator
function
framework
implemented
using
pthreads
pipes
c
edit
possible
introduce
generators
c
using
pre
processor
macros
resulting
code
might
aspects
different
native
c
generator
syntax
uncluttered
set
pre
processor
macros
defined
source
allow
generators
defined
syntax
following
example
generator
descent
int
place
constructor
generator
e
g
descent
int
minv
int
maxv
emit
stop
body
generator
emit
int
emit
int
values
start
body
generator
yield
similar
yield
python
returns
next
number
reversed
stop
stop
end
sequence
end
body
generator
iterated
using
int
main
int
argc
char
argv
descent
gen
int
n
gen
n
get
next
generator
invocation
printf
next
number
n
n
return
moreover
c
allows
foreach
loops
applied
class
provides
begin
end
functions
possible
write
generator
like
classes
defining
iterable
methods
begin
end
iterator
methods
operator
operator
operator
class
example
possible
write
following
program
include
iostream
int
main
int
range
std
cout
std
endl
return
basic
range
implementation
would
look
like
class
range
private
int
last
int
iter
public
range
int
end
last
end
iter
iterable
functions
const
range
begin
const
return
const
range
end
const
return
iterator
functions
bool
operator
const
range
const
return
iter
last
void
operator
iter
int
operator
const
return
iter
perl
edit
perl
natively
provide
generators
support
provided
coro
generator
module
uses
coro
co
routine
framework
example
usage
use
strict
use
warnings
enable
generator
block
yield
use
coro
generator
array
reference
iterate
chars
z
new
generator
called
like
coderef
letters
generator
letter
chars
get
next
letter
chars
yield
letter
call
generator
times
print
letters
n
tcl
edit
tcl
generator
mechanism
founded
named
coroutines
proc
generator
body
coroutine
gen
incr
disambiguator
apply
script
produce
result
generator
name
generator
yield
info
coroutine
generation
eval
script
finish
loop
caller
using
break
exception
return
code
break
body
use
simple
loop
actual
generation
set
count
generator
set
incr
yield
pull
values
generator
exhausted
puts
count
haskell
edit
haskell
lazy
evaluation
model
everything
generator
every
datum
created
non
strict
data
constructor
generated
demand
example
countfrom
n
n
countfrom
n
example
use
printing
integers
test
mapm
print
takewhile
countfrom
primes
nextprime
nextprime
n
b
n
nextprime
n
otherwise
nextprime
n
b
rem
n
takewhile
n
tail
primes
non
strict
list
constructor
cons
called
operator
used
parenthesization
uses
standard
adaptor
function
takewhile
p
takewhile
p
x
xs
p
x
x
takewhile
p
xs
otherwise
fetches
values
agreeable
predicate
stops
requesting
new
values
soon
non
agreeable
one
encountered
shared
storage
access
used
universal
mediator
haskell
list
comprehensions
freely
used
test
mapm
print
takewhile
x
x
x
countfrom
test
mapm
print
x
x
x
takewhile
countfrom
racket
edit
racket
provides
several
related
facilities
generators
first
loop
forms
work
sequences
kind
producer
range
printf
n
sequences
also
first
class
values
define
range
printf
n
sequences
implemented
imperatively
private
state
variables
implemented
possibly
infinite
lazy
lists
also
new
struct
definitions
property
specifies
used
sequences
directly
racket
comes
generator
library
traditional
generator
specification
example
lang
racket
require
racket
generator
define
ints
generator
naturals
infinite
sequence
integers
yield
define
g
ints
list
g
g
g
note
racket
core
implements
powerful
continuation
features
providing
general
entrant
continuations
composable
also
delimited
continuations
using
generator
library
implemented
racket
php
edit
community
php
implemented
generators
php
details
found
original
request
comments
generators
infinite
fibonacci
sequence
function
fibonacci
last
current
yield
true
current
last
current
last
current
last
yield
current
foreach
fibonacci
number
echo
number
n
fibonacci
sequence
limit
function
fibonacci
int
limit
generator
yield
b
limit
yield
b
b
foreach
fibonacci
number
echo
number
n
function
contains
yield
statement
automatically
generator
function
ruby
edit
ruby
supports
generators
starting
version
form
built
enumerator
class
generator
enumerator
object
chars
enumerator
new
b
c
z
times
puts
chars
next
generator
block
count
enumerator
new
yielder
loop
yielder
yield
end
times
puts
count
next
java
edit
java
standard
interface
implementing
iterators
since
early
days
since
java
foreach
construction
makes
easy
loop
objects
provide
java
lang
iterable
interface
java
collections
framework
collections
frameworks
typically
provide
iterators
collections
however
java
generators
built
language
means
creating
iterators
often
much
trickier
languages
built
generators
especially
generation
logic
complex
state
must
saved
restored
every
time
item
yielded
iterator
possible
store
state
local
variables
use
built
looping
routines
generators
available
instead
must
manually
simulated
using
object
fields
hold
local
state
loop
counters
even
simple
iterators
built
way
tend
significantly
bulkier
using
generators
lot
boilerplate
code
original
example
could
written
java
iterator
implemented
anonymous
class
uses
generics
need
int
new
iterable
integer
public
iterator
integer
iterator
return
new
iterator
integer
int
counter
public
boolean
hasnext
return
counter
public
integer
next
return
counter
public
void
remove
throw
new
unsupportedoperationexception
system
println
infinite
fibonacci
sequence
could
also
written
java
iterator
iterable
integer
fibo
new
iterable
integer
public
iterator
integer
iterator
return
new
iterator
integer
int
b
public
boolean
hasnext
return
true
public
integer
next
int
temp
b
b
temp
return
temp
public
void
remove
throw
new
unsupportedoperationexception
could
used
int
f
fibo
system
println
next
fibonacci
number
f
somecondition
f
break
also
infinite
fibonacci
sequence
could
also
written
using
java
stream
interface
iterable
integer
myiterable
stream
generates
fib
sequence
iterate
new
integer
x
new
integer
x
x
x
map
x
x
iterator
myiterable
foreach
system
println
get
iterator
java
super
interface
basestream
stream
interface
save
iterator
stream
generates
fib
sequence
iterator
integer
mygenerator
stream
generates
fib
sequence
iterate
new
integer
x
new
integer
x
x
x
map
x
x
iterator
print
first
elements
int
system
println
mygenerator
next
system
println
done
first
iteration
print
next
elements
int
system
println
mygenerator
next
output
done
first
iteration
c
edit
example
c
generator
yield
available
since
c
version
examples
utilize
generics
required
yield
keyword
also
helps
implementing
custom
stateful
iterations
collection
discussed
discussion
method
takes
iterable
input
possibly
array
returns
even
numbers
public
static
ienumerable
int
geteven
ienumerable
int
numbers
foreach
int
number
numbers
number
yield
return
number
possible
use
multiple
yield
return
statements
applied
sequence
iteration
public
class
citycollection
ienumerable
string
public
ienumerator
string
getenumerator
yield
return
new
york
yield
return
paris
yield
return
london
xl
edit
xl
iterators
basis
loops
import
io
xl
ui
console
iterator
integeriterator
var
counter
integer
low
high
integer
written
counter
low
high
counter
low
counter
high
loop
yield
counter
note
needs
declared
declared
var
iterator
implicit
declaration
integer
therefore
made
loop
io
writeln
f
edit
information
sequence
expression
f
provides
generators
via
sequence
expressions
since
version
define
sequence
lazily
evaluated
sequential
access
via
seq
list
eagerly
evaluated
sequential
access
via
array
eagerly
evaluated
indexed
access
via
contain
code
generates
values
example
seq
b
b
yield
b
b
forms
sequence
squares
numbers
filtering
numbers
range
numbers
python
edit
generators
added
python
version
example
generator
typing
import
iterator
def
countfrom
n
int
iterator
int
true
yield
n
n
example
use
printing
integers
note
iteration
terminates
normally
despite
countfrom
written
infinite
loop
countfrom
print
else
break
another
generator
produces
prime
numbers
indefinitely
needed
import
itertools
def
primes
iterator
int
yield
n
p
true
dividing
n
numbers
p
including
sqrt
n
produces
non
zero
remainder
n
prime
n
f
f
itertools
takewhile
lambda
f
f
f
n
p
yield
n
p
append
n
n
python
generator
thought
iterator
contains
frozen
stack
frame
whenever
next
called
iterator
python
resumes
frozen
frame
executes
normally
next
yield
statement
reached
generator
frame
frozen
yielded
value
returned
caller
pep
implemented
python
adds
yield
expression
allowing
generator
delegate
part
operations
another
generator
iterable
generator
expressions
edit
python
syntax
modeled
list
comprehensions
called
generator
expression
aids
creation
generators
following
extends
first
example
using
generator
expression
compute
squares
countfrom
generator
function
squares
n
n
n
countfrom
j
squares
j
print
j
else
break
ecmascript
edit
ecmascript
k
harmony
introduced
generator
functions
infinite
fibonacci
sequence
written
using
function
generator
function
fibonacci
limit
let
prev
curr
limit
curr
limit
yield
curr
prev
curr
curr
prev
curr
bounded
upper
limit
const
n
fibonacci
console
log
n
generator
without
upper
bound
limit
const
n
fibonacci
console
log
n
n
break
manually
iterating
let
fibgen
fibonacci
console
log
fibgen
next
value
console
log
fibgen
next
value
console
log
fibgen
next
value
console
log
fibgen
next
value
console
log
fibgen
next
value
console
log
fibgen
next
value
picks
stopped
const
n
fibgen
console
log
n
n
break
r
edit
iterators
package
used
purpose
library
iterators
example
abc
iter
c
b
c
nextelem
abc
smalltalk
edit
example
pharo
smalltalk
golden
ratio
generator
returns
invocation
goldenratio
next
better
approximation
golden
ratio
goldenratio
generator
g
x
z
r
x
z
x
r
z
asfloat
x
z
g
yield
r
repeat
goldenratio
next
expression
returns
next
approximations
character
cr
join
collect
dummy
ratio
next
see
hidden
gem
pharo
generator
see
also
edit
list
comprehension
another
construct
generates
sequence
values
iterator
concept
producing
list
one
element
time
iteratee
alternative
lazy
evaluation
producing
values
needed
corecursion
potentially
infinite
data
recursion
instead
yield
coroutine
even
generalization
subroutine
continuation
generalization
control
flow
notes
edit
difference
iterator
generator
mw
parser
output
cite
citation
font
style
inherit
word
wrap
break
word
mw
parser
output
citation
q
quotes
mw
parser
output
citation
target
background
color
rgba
mw
parser
output
id
lock
free
mw
parser
output
citation
cs
lock
free
background
linear
gradient
transparent
transparent
url
upload
wikimedia
org
wikipedia
commons
lock
green
svg
right
em
center
px
repeat
mw
parser
output
id
lock
limited
mw
parser
output
id
lock
registration
mw
parser
output
citation
cs
lock
limited
mw
parser
output
citation
cs
lock
registration
background
linear
gradient
transparent
transparent
url
upload
wikimedia
org
wikipedia
commons
lock
gray
alt
svg
right
em
center
px
repeat
mw
parser
output
id
lock
subscription
mw
parser
output
citation
cs
lock
subscription
background
linear
gradient
transparent
transparent
url
upload
wikimedia
org
wikipedia
commons
aa
lock
red
alt
svg
right
em
center
px
repeat
mw
parser
output
cs
ws
icon
background
linear
gradient
transparent
transparent
url
upload
wikimedia
org
wikipedia
commons
c
wikisource
logo
svg
right
em
center
px
repeat
mw
parser
output
cs
code
color
inherit
background
inherit
border
none
padding
inherit
mw
parser
output
cs
hidden
error
display
none
color
mw
parser
output
cs
visible
error
color
mw
parser
output
cs
maint
display
none
color
margin
left
em
mw
parser
output
cs
format
font
size
mw
parser
output
cs
kern
left
padding
left
em
mw
parser
output
cs
kern
right
padding
right
em
mw
parser
output
citation
mw
selflink
font
weight
inherit
kiselyov
oleg
january
general
ways
traverse
collections
scheme
anthony
ralston
encyclopedia
computer
science
nature
pub
group
isbn
retrieved
may
icon
programming
language
utilizes
generators
implement
goal
directed
evaluation
icon
generators
invoked
contexts
outside
normal
looping
control
structures
liskov
barbara
april
history
clu
pdf
archived
original
pdf
retrieved
b
python
enhancement
proposals
pep
simple
generators
pep
generator
expressions
pep
coroutines
via
enhanced
generators
yield
c
reference
php
generators
overview
manual
liskov
b
snyder
atkinson
r
schaffert
c
abstraction
mechanisms
clu
communications
acm
citeseerx
doi
cid
structured
concurrency
c
generators
c
september
yield
keyword
used
c
stackoverflow
com
retrieved
details
f
computation
expressions
retrieved
pep
syntax
delegating
subgenerator
generator
functions
r
infinite
generators
r
january
references
edit
stephan
murer
stephen
omohundro
david
stoutamire
clemens
szyperski
iteration
abstraction
sather
acm
transactions
programming
languages
systems
mw
parser
output
navbox
box
sizing
border
box
border
px
solid
b
width
clear
font
size
text
align
center
padding
px
margin
em
auto
mw
parser
output
navbox
navbox
margin
top
mw
parser
output
navbox
navbox
mw
parser
output
navbox
navbox
styles
navbox
margin
top
px
mw
parser
output
navbox
inner
mw
parser
output
navbox
subgroup
width
mw
parser
output
navbox
group
mw
parser
output
navbox
title
mw
parser
output
navbox
abovebelow
padding
em
em
line
height
em
text
align
center
mw
parser
output
navbox
group
white
space
nowrap
text
align
right
mw
parser
output
navbox
mw
parser
output
navbox
subgroup
background
color
fdfdfd
mw
parser
output
navbox
list
line
height
em
border
color
fdfdfd
mw
parser
output
navbox
list
group
text
align
left
border
left
width
px
border
left
style
solid
mw
parser
output
tr
tr
navbox
abovebelow
mw
parser
output
tr
tr
navbox
group
mw
parser
output
tr
tr
navbox
image
mw
parser
output
tr
tr
navbox
list
border
top
px
solid
fdfdfd
mw
parser
output
navbox
title
background
color
ccf
mw
parser
output
navbox
abovebelow
mw
parser
output
navbox
group
mw
parser
output
navbox
subgroup
navbox
title
background
color
ddf
mw
parser
output
navbox
subgroup
navbox
group
mw
parser
output
navbox
subgroup
navbox
abovebelow
background
color
e
e
ff
mw
parser
output
navbox
even
background
color
f
f
f
mw
parser
output
navbox
odd
background
color
transparent
mw
parser
output
navbox
hlist
td
dl
mw
parser
output
navbox
hlist
td
ol
mw
parser
output
navbox
hlist
td
ul
mw
parser
output
navbox
td
hlist
dl
mw
parser
output
navbox
td
hlist
ol
mw
parser
output
navbox
td
hlist
ul
padding
em
mw
parser
output
navbox
navbar
display
block
font
size
mw
parser
output
navbox
title
navbar
float
left
text
align
left
margin
right
em
authority
control
national
libraries
france
data
germany
united
states
newpp
limit
report
parsed
mw
cached
time
cache
expiry
reduced
expiry
false
complications
vary
revision
sha
cpu
time
usage
seconds
real
time
usage
seconds
preprocessor
visited
node
count
post
expand
include
size
bytes
template
argument
size
bytes
highest
expansion
depth
expensive
parser
function
count
unstrip
recursion
depth
unstrip
post
expand
size
bytes
lua
time
usage
seconds
lua
memory
usage
bytes
number
wikibase
entities
loaded
transclusion
expansion
time
report
ms
calls
template
total
template
cite
web
template
authority
control
template
refimprove
template
ambox
template
uses
template
find
sources
mainspace
template
cite
journal
template
information
template
cite
book
saved
parser
cache
key
enwiki
pcache
idhash
canonical
timestamp
revision
id
serialized
json
retrieved
oldid
categories
programming
constructs
articles
example
tcl
code
articles
example
racket
code
iteration
programming
hidden
categories
articles
needing
additional
references
july
articles
needing
additional
references
articles
bnf
identifiers
articles
gnd
identifiers
articles
lccn
identifiers
articles
example
python
programming
language
code
articles
example
haskell
code
articles
example
ruby
code
articles
example
c
sharp
code
articles
example
java
code
articles
example
perl
code
articles
example
r
code
navigation
menu
