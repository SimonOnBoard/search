coroutine
wikipedia
free
encyclopedia
jump
navigation
jump
search
coroutines
computer
program
components
generalize
subroutines
non
preemptive
multitasking
allowing
execution
suspended
resumed
coroutines
well
suited
implementing
familiar
program
components
cooperative
tasks
exceptions
event
loops
iterators
infinite
lists
pipes
according
donald
knuth
melvin
conway
coined
term
coroutine
applied
construction
assembly
program
first
published
explanation
coroutine
appeared
later
contents
comparison
subroutines
threads
generators
mutual
recursion
common
uses
native
support
implementations
c
c
c
clojure
java
javascript
kotlin
modula
mono
net
framework
perl
php
python
ruby
rust
scala
scheme
smalltalk
swift
tool
command
language
tcl
vala
assembly
languages
see
also
references
reading
external
links
comparison
edit
subroutines
edit
subroutines
special
cases
coroutines
subroutines
invoked
execution
begins
start
subroutine
exits
finished
instance
subroutine
returns
hold
state
invocations
contrast
coroutines
exit
calling
coroutines
may
later
return
point
invoked
original
coroutine
coroutine
point
view
exiting
calling
another
coroutine
thus
coroutine
instance
holds
state
varies
invocations
multiple
instances
given
coroutine
difference
calling
another
coroutine
means
yielding
simply
calling
another
routine
also
would
return
original
point
relationship
two
coroutines
yield
caller
callee
instead
symmetric
subroutine
translated
coroutine
call
yield
simple
example
coroutines
useful
suppose
consumer
producer
relationship
one
routine
creates
items
adds
queue
another
removes
items
queue
uses
reasons
efficiency
want
add
remove
several
items
code
might
look
like
var
q
new
queue
coroutine
produce
loop
q
full
create
new
items
add
items
q
yield
consume
coroutine
consume
loop
q
empty
remove
items
q
use
items
yield
produce
call
produce
queue
completely
filled
emptied
yielding
control
coroutine
using
yield
command
coroutines
calls
starting
right
yield
outer
coroutine
loop
although
example
often
used
introduction
multithreading
two
threads
needed
yield
statement
implemented
jump
directly
one
routine
threads
edit
coroutines
similar
threads
however
coroutines
cooperatively
multitasked
whereas
threads
typically
preemptively
multitasked
coroutines
provide
concurrency
parallelism
advantages
coroutines
threads
may
used
hard
realtime
context
switching
coroutines
need
involve
system
calls
blocking
calls
whatsoever
need
synchronization
primitives
mutexes
semaphores
etc
order
guard
critical
sections
need
support
operating
system
possible
implement
coroutines
using
preemptively
scheduled
threads
way
transparent
calling
code
advantages
particularly
suitability
hard
realtime
operation
relative
cheapness
switching
lost
generators
edit
mw
parser
output
hatnote
font
style
italic
mw
parser
output
div
hatnote
padding
left
em
margin
bottom
em
mw
parser
output
hatnote
font
style
normal
mw
parser
output
hatnote
link
hatnote
margin
top
em
main
article
generator
computer
programming
generators
also
known
semicoroutines
subset
coroutines
specifically
yield
multiple
times
suspending
execution
allowing
entry
multiple
entry
points
differ
coroutines
ability
control
execution
continues
immediately
yield
generators
cannot
instead
transferring
control
back
generator
caller
since
generators
primarily
used
simplify
writing
iterators
yield
statement
generator
specify
coroutine
jump
rather
passes
value
back
parent
routine
however
still
possible
implement
coroutines
top
generator
facility
aid
top
level
dispatcher
routine
trampoline
essentially
passes
control
explicitly
child
generators
identified
tokens
passed
back
generators
var
q
new
queue
generator
produce
loop
q
full
create
new
items
add
items
q
yield
consume
generator
consume
loop
q
empty
remove
items
q
use
items
yield
produce
subroutine
dispatcher
var
new
dictionary
generator
iterator
produce
start
produce
consume
start
consume
var
current
produce
loop
call
current
current
next
current
call
dispatcher
number
implementations
coroutines
languages
generator
support
native
coroutines
e
g
python
use
similar
model
mutual
recursion
edit
information
mutual
recursion
using
coroutines
state
machines
concurrency
similar
using
mutual
recursion
tail
calls
cases
control
changes
different
one
set
routines
however
coroutines
flexible
generally
efficient
since
coroutines
yield
rather
return
resume
execution
rather
restarting
beginning
able
hold
state
variables
closure
execution
point
yields
limited
tail
position
mutually
recursive
subroutines
must
either
use
shared
variables
pass
state
parameters
mutually
recursive
call
subroutine
requires
new
stack
frame
unless
tail
call
elimination
implemented
passing
control
coroutines
uses
existing
contexts
implemented
simply
jump
common
uses
edit
coroutines
useful
implement
following
state
machines
within
single
subroutine
state
determined
current
entry
exit
point
procedure
result
readable
code
compared
use
goto
may
also
implemented
via
mutual
recursion
tail
calls
actor
model
concurrency
instance
video
games
actor
procedures
logically
separates
code
voluntarily
give
control
central
scheduler
executes
sequentially
form
cooperative
multitasking
generators
useful
streams
particularly
input
output
generic
traversal
data
structures
communicating
sequential
processes
sub
process
coroutine
channel
inputs
outputs
blocking
operations
yield
coroutines
scheduler
unblocks
completion
events
alternatively
sub
process
may
parent
one
following
data
pipeline
preceding
case
pattern
expressed
nested
generators
reverse
communication
commonly
used
mathematical
software
wherein
procedure
solver
integral
evaluator
needs
using
process
make
computation
evaluating
equation
integrand
native
support
edit
coroutines
originated
assembly
language
method
supported
high
level
programming
languages
mw
parser
output
div
col
margin
top
em
column
width
em
mw
parser
output
div
col
small
font
size
mw
parser
output
div
col
rules
column
rule
px
solid
aaa
mw
parser
output
div
col
dl
mw
parser
output
div
col
ol
mw
parser
output
div
col
ul
margin
top
mw
parser
output
div
col
li
mw
parser
output
div
col
dd
page
break
inside
avoid
break
inside
avoid
column
aikido
angelscript
ballerina
bcpl
pascal
borland
turbo
pascal
uthreads
module
beta
bliss
c
since
c
c
since
chapel
chuck
clu
dynamic
c
erlang
f
factor
gamemonkey
script
gdscript
godot
scripting
language
go
haskell
high
level
assembly
icon
io
javascript
since
standardized
ecmascript
ecmascript
also
includes
await
support
julia
kotlin
since
limbo
lua
lucid
c
modula
nemerle
perl
using
coro
module
php
hiphop
native
since
php
picolisp
prolog
python
since
improved
support
since
explicit
syntax
since
raku
ruby
rust
since
sather
scheme
self
simula
smalltalk
squirrel
stackless
python
supercollider
tcl
since
urbiscript
since
continuations
used
implement
coroutines
programming
languages
support
also
quite
easily
support
coroutines
implementations
edit
update
many
popular
programming
languages
including
c
derivatives
direct
support
coroutines
within
language
standard
libraries
large
part
due
limitations
stack
based
subroutine
implementation
exception
c
library
boost
context
part
boost
libraries
supports
context
swapping
arm
mips
powerpc
sparc
x
posix
mac
os
x
windows
coroutines
built
upon
boost
context
situations
coroutine
would
natural
implementation
mechanism
available
typical
response
use
closure
subroutine
state
variables
static
variables
often
boolean
flags
maintain
internal
state
calls
transfer
control
correct
point
conditionals
within
code
result
execution
different
code
paths
successive
calls
based
values
state
variables
another
typical
response
implement
explicit
state
machine
form
large
complex
switch
statement
via
goto
statement
particularly
computed
goto
implementations
considered
difficult
understand
maintain
motivation
coroutine
support
threads
lesser
extent
fibers
alternative
coroutines
mainstream
programming
environments
today
threads
provide
facilities
managing
real
time
cooperative
interaction
simultaneously
executing
pieces
code
threads
widely
available
environments
support
c
supported
natively
many
modern
languages
familiar
many
programmers
usually
well
implemented
well
documented
well
supported
however
solve
large
difficult
problem
include
many
powerful
complex
facilities
correspondingly
difficult
learning
curve
coroutine
needed
using
thread
overkill
one
important
difference
threads
coroutines
threads
typically
preemptively
scheduled
coroutines
threads
rescheduled
instant
execute
concurrently
programs
using
threads
must
careful
locking
contrast
coroutines
rescheduled
specific
points
program
execute
concurrently
programs
using
coroutines
often
avoid
locking
entirely
property
also
cited
benefit
event
driven
asynchronous
programming
since
fibers
cooperatively
scheduled
provide
ideal
base
implementing
coroutines
however
system
support
fibers
often
lacking
compared
threads
c
edit
order
implement
general
purpose
coroutines
second
call
stack
must
obtained
feature
directly
supported
c
language
reliable
albeit
platform
specific
way
achieve
use
small
amount
inline
assembly
explicitly
manipulate
stack
pointer
initial
creation
coroutine
approach
recommended
tom
duff
discussion
relative
merits
vs
method
used
protothreads
non
primary
source
needed
platforms
provide
posix
sigaltstack
system
call
second
call
stack
obtained
calling
springboard
function
within
signal
handler
achieve
goal
portable
c
cost
extra
complexity
c
libraries
complying
posix
single
unix
specification
susv
provided
routines
getcontext
setcontext
makecontext
swapcontext
functions
declared
obsolete
posix
second
call
stack
obtained
one
methods
listed
setjmp
longjmp
functions
standard
c
library
used
implement
switches
coroutines
functions
save
restore
respectively
stack
pointer
program
counter
callee
saved
registers
internal
state
required
abi
returning
coroutine
yielded
restores
state
would
restored
upon
returning
function
call
minimalist
implementations
piggyback
setjmp
longjmp
functions
may
achieve
result
via
small
block
inline
assembly
swaps
merely
stack
pointer
program
counter
clobbers
registers
significantly
faster
setjmp
longjmp
must
conservatively
store
registers
may
use
according
abi
whereas
clobber
method
allows
compiler
store
spilling
stack
knows
actually
use
due
lack
direct
language
support
many
authors
written
libraries
coroutines
hide
details
russ
cox
libtask
library
good
example
genre
uses
context
functions
provided
native
c
library
otherwise
provides
implementations
arm
powerpc
sparc
x
notable
implementations
include
libpcl
coro
lthread
libcoroutine
libconcurrency
libcoro
ribs
libdill
libaco
libco
addition
general
approach
several
attempts
made
approximate
coroutines
c
combinations
subroutines
macros
simon
tatham
contribution
based
duff
device
notable
example
genre
basis
protothreads
similar
implementations
addition
duff
objections
tatham
comments
provide
frank
evaluation
limitations
approach
far
know
worst
piece
c
hackery
ever
seen
serious
production
code
main
shortcomings
approximation
maintaining
separate
stack
frame
coroutine
local
variables
preserved
across
yields
function
possible
multiple
entries
function
control
yielded
top
level
routine
c
edit
c
introduced
standardized
coroutines
stackless
functions
suspended
middle
execution
resumed
later
point
suspended
state
coroutine
stored
heap
implementation
standard
ongoing
g
msvc
compilers
currently
fully
supporting
standard
coroutines
recent
versions
boost
coroutine
created
oliver
kowalke
official
released
portable
coroutine
library
boost
since
version
library
relies
boost
context
supports
arm
mips
powerpc
sparc
x
posix
mac
os
x
windows
boost
coroutine
also
created
oliver
kowalke
modernized
portable
coroutine
library
since
boost
version
takes
advantage
c
features
removes
support
symmetric
coroutines
mordor
mozy
open
sourced
c
library
implementing
coroutines
emphasis
using
abstract
asynchronous
familiar
sequential
model
co
stackless
coroutine
based
c
preprocessor
tricks
providing
await
yield
emulation
scummvm
scummvm
project
implements
light
weight
version
stackless
coroutines
based
simon
tatham
article
tonbit
coroutine
c
single
h
asymmetric
coroutine
implementation
via
ucontext
fiber
coroutines
landed
clang
may
libc
implementation
ongoing
elle
docker
oatpp
coroutines
stackless
coroutines
scheduling
designed
high
concurrency
level
operations
used
million
websocket
connections
experiment
oat
part
oat
web
framework
c
edit
mindtouch
dream
mindtouch
dream
rest
framework
provides
implementation
coroutines
based
c
iterator
pattern
caliburn
caliburn
screen
patterns
framework
wpf
uses
c
iterators
ease
ui
programming
particularly
asynchronous
scenarios
power
threading
library
power
threading
library
jeffrey
richter
implements
asyncenumerator
provides
simplified
asynchronous
programming
model
using
iterator
based
coroutines
unity
game
engine
implements
coroutines
servelat
pieces
servelat
pieces
project
yevhen
bobrov
provides
transparent
asynchrony
silverlight
wcf
services
ability
asynchronously
call
synchronous
method
implementation
based
caliburn
coroutines
iterator
c
iterator
blocks
net
framework
provides
semi
coroutine
generator
functionality
iterator
pattern
yield
keyword
c
includes
await
syntax
support
clojure
edit
cloroutine
third
party
library
providing
support
stackless
coroutines
clojure
implemented
macro
statically
splitting
arbitrary
code
block
arbitrary
var
calls
emitting
coroutine
stateful
function
edit
implements
coroutines
standard
library
class
fiber
generator
makes
trivial
expose
fiber
function
input
range
making
fiber
compatible
existing
range
algorithms
java
edit
several
implementations
coroutines
java
despite
constraints
imposed
java
abstractions
jvm
preclude
possibility
four
general
methods
used
two
break
bytecode
portability
among
standards
compliant
jvms
modified
jvms
possible
build
patched
jvm
support
coroutines
natively
da
vinci
jvm
patches
created
modified
bytecode
coroutine
functionality
possible
rewriting
regular
java
bytecode
either
fly
compile
time
toolkits
include
javaflow
java
coroutines
coroutines
platform
specific
jni
mechanisms
use
jni
methods
implemented
os
c
libraries
provide
functionality
jvm
citation
needed
thread
abstractions
coroutine
libraries
implemented
using
threads
may
heavyweight
though
performance
vary
based
jvm
thread
implementation
javascript
edit
node
fibers
fibjs
fibjs
javascript
runtime
built
chrome
v
javascript
engine
fibjs
uses
fibers
switch
sync
style
non
blocking
model
build
scalable
systems
since
ecmascript
stackless
coroutine
functionality
generators
yield
expressions
provided
kotlin
edit
kotlin
implements
coroutines
part
first
party
library
modula
edit
modula
defined
wirth
implements
coroutines
part
standard
system
library
procedure
newprocess
fills
context
given
code
block
space
stack
parameters
procedure
transfer
transfers
control
coroutine
given
coroutine
context
parameter
mono
edit
mono
common
language
runtime
support
continuations
coroutines
built
net
framework
edit
development
net
framework
microsoft
extended
design
common
language
runtime
clr
hosting
apis
handle
fiber
based
scheduling
eye
towards
use
fiber
mode
sql
server
release
support
task
switching
hook
iclrtask
switchout
removed
due
time
constraints
consequently
use
fiber
api
switch
tasks
currently
viable
option
net
framework
perl
edit
coro
coroutines
natively
implemented
raku
backends
php
edit
amphp
coroutine
implemented
way
resembles
python
functions
go
many
examples
showing
code
converted
number
lines
behavior
python
edit
python
implements
better
support
coroutine
like
functionality
based
extended
generators
pep
python
improves
ability
supporting
delegating
subgenerator
pep
python
introduces
comprehensive
asynchronous
framework
standardized
pep
includes
coroutines
leverage
subgenerator
delegation
python
introduces
explicit
support
coroutines
async
await
syntax
pep
since
python
async
await
become
reserved
keywords
eventlet
greenlet
gevent
stackless
python
ruby
edit
ruby
supports
coroutines
natively
implemented
fibers
semi
coroutines
implementation
marc
de
scheemaecker
ruby
higher
supports
coroutines
natively
implemented
fibers
implementation
thomas
w
branson
rust
edit
rust
supports
coroutines
since
version
two
popular
libraries
providing
asynchronous
runtimes
tokio
async
std
scala
edit
scala
coroutines
coroutine
implementation
scala
implementation
library
level
extension
relies
scala
macro
system
statically
transform
sections
program
coroutine
objects
implementation
require
modifications
jvm
fully
portable
different
jvms
works
alternative
scala
backends
scala
js
compiles
javascript
scala
coroutines
rely
coroutine
macro
transforms
normal
block
code
coroutine
definition
coroutine
definition
invoked
call
operation
instantiates
coroutine
frame
coroutine
frame
resumed
resume
method
resumes
execution
coroutine
body
reaching
yieldval
keyword
suspends
coroutine
frame
scala
coroutines
also
expose
snapshot
method
effectively
duplicates
coroutine
detailed
descriptions
scala
coroutines
snapshots
appeared
ecoop
along
formal
model
scheme
edit
since
scheme
provides
full
support
continuations
implementing
coroutines
nearly
trivial
requiring
queue
continuations
maintained
smalltalk
edit
since
smalltalk
environments
execution
stack
first
class
citizen
coroutines
implemented
without
additional
library
vm
support
swift
edit
swiftcoroutine
swift
coroutines
library
ios
macos
linux
tool
command
language
tcl
edit
since
version
tool
command
language
supports
coroutines
core
language
vala
edit
vala
implements
native
support
coroutines
designed
used
gtk
main
loop
used
alone
care
taken
ensure
end
callback
never
called
least
one
yield
assembly
languages
edit
machine
dependent
assembly
languages
often
provide
direct
methods
coroutine
execution
example
macro
assembly
language
pdp
family
minicomputers
classic
coroutine
switch
effected
instruction
jsr
pc
sp
jumps
address
popped
stack
pushes
current
e
next
instruction
address
onto
stack
vaxen
vax
macro
comparable
instruction
jsb
sp
even
motorola
instruction
jsr
note
bytes
address
popped
stack
instruction
much
used
standard
monitor
assist
see
also
edit
async
await
pipeline
kind
coroutine
used
communicating
programs
protothreads
stackless
lightweight
thread
implementation
using
coroutine
like
mechanism
references
edit
mw
parser
output
reflist
font
size
margin
bottom
em
list
style
type
decimal
mw
parser
output
reflist
references
font
size
margin
bottom
list
style
type
inherit
mw
parser
output
reflist
columns
column
width
em
mw
parser
output
reflist
columns
column
width
em
mw
parser
output
reflist
columns
margin
top
em
mw
parser
output
reflist
columns
ol
margin
top
mw
parser
output
reflist
columns
li
page
break
inside
avoid
break
inside
avoid
column
mw
parser
output
reflist
upper
alpha
list
style
type
upper
alpha
mw
parser
output
reflist
upper
roman
list
style
type
upper
roman
mw
parser
output
reflist
lower
alpha
list
style
type
lower
alpha
mw
parser
output
reflist
lower
greek
list
style
type
lower
greek
mw
parser
output
reflist
lower
roman
list
style
type
lower
roman
mw
parser
output
cite
citation
font
style
inherit
word
wrap
break
word
mw
parser
output
citation
q
quotes
mw
parser
output
citation
target
background
color
rgba
mw
parser
output
id
lock
free
mw
parser
output
citation
cs
lock
free
background
linear
gradient
transparent
transparent
url
upload
wikimedia
org
wikipedia
commons
lock
green
svg
right
em
center
px
repeat
mw
parser
output
id
lock
limited
mw
parser
output
id
lock
registration
mw
parser
output
citation
cs
lock
limited
mw
parser
output
citation
cs
lock
registration
background
linear
gradient
transparent
transparent
url
upload
wikimedia
org
wikipedia
commons
lock
gray
alt
svg
right
em
center
px
repeat
mw
parser
output
id
lock
subscription
mw
parser
output
citation
cs
lock
subscription
background
linear
gradient
transparent
transparent
url
upload
wikimedia
org
wikipedia
commons
aa
lock
red
alt
svg
right
em
center
px
repeat
mw
parser
output
cs
ws
icon
background
linear
gradient
transparent
transparent
url
upload
wikimedia
org
wikipedia
commons
c
wikisource
logo
svg
right
em
center
px
repeat
mw
parser
output
cs
code
color
inherit
background
inherit
border
none
padding
inherit
mw
parser
output
cs
hidden
error
display
none
color
mw
parser
output
cs
visible
error
color
mw
parser
output
cs
maint
display
none
color
margin
left
em
mw
parser
output
cs
format
font
size
mw
parser
output
cs
kern
left
padding
left
em
mw
parser
output
cs
kern
right
padding
right
em
mw
parser
output
citation
mw
selflink
font
weight
inherit
knuth
donald
ervin
fundamental
algorithms
pdf
art
computer
programming
vol
rd
ed
addison
wesley
section
history
bibliography
pp
isbn
archived
pdf
original
conway
melvin
e
july
design
separable
transition
diagram
compiler
pdf
communications
acm
acm
doi
issn
cid
via
acm
digital
library
b
knuth
donald
ervin
fundamental
algorithms
art
computer
programming
vol
rd
ed
addison
wesley
section
coroutines
pp
isbn
perlis
alan
j
september
epigrams
programming
acm
sigplan
notices
doi
cid
archived
original
january
symmetry
complexity
reducing
concept
co
routines
include
sub
routines
seek
everywhere
anthony
ralston
encyclopedia
computer
science
nature
pub
group
isbn
retrieved
may
see
example
python
language
reference
yield
expressions
makes
generator
functions
quite
similar
coroutines
yield
multiple
times
one
entry
point
execution
suspended
difference
generator
function
cannot
control
execution
continue
yields
control
always
transferred
generator
caller
mertz
david
july
generator
based
state
machines
charming
python
ibm
developerworks
archived
original
february
retrieved
feb
coroutine
type
safe
coroutines
using
lightweight
session
types
co
routines
haskell
coroutines
module
coroutines
hhf
hla
standard
library
manual
new
javascript
julia
manual
control
flow
tasks
aka
coroutines
new
kotlin
lua
reference
manual
www
lua
org
python
async
await
tutorial
stack
abuse
december
compound
statements
python
documentation
docs
python
org
gather
coroutines
dahl
j
hoare
c
r
ed
hierarchical
program
structures
structured
programming
london
uk
academic
press
pp
isbn
cite
book
author
generic
name
help
cs
maint
multiple
names
authors
list
link
mccartney
j
rethinking
computer
music
programming
language
supercollider
computer
music
journal
mit
press
implementing
coroutines
net
wrapping
unmanaged
fiber
api
archived
wayback
machine
ajai
shankar
msdn
magazine
b
c
coroutines
c
brainwagon
b
libco
code
byuu
org
getcontext
linux
manual
page
man
org
russ
cox
libtask
coroutine
library
freebsd
linux
mac
os
x
sunos
portable
coroutine
library
c
library
using
posix
susv
facilities
archived
wayback
machine
edgar
toernig
coro
library
x
linux
freebsd
lthread
multicore
multithread
coroutine
library
written
c
libcoroutine
portable
coroutine
implementation
freebsd
linux
os
x
ppc
x
sunos
symbian
others
libconcurrency
scalable
concurrency
library
c
simple
c
library
portable
stack
switching
coroutines
libcoro
c
library
implements
coroutines
cooperative
multitasking
portable
fashion
used
basis
coro
perl
module
ribs
robust
infrastructure
backend
systems
version
aolarchive
ribs
august
via
github
libdill
libdill
org
blazing
fast
lightweight
c
asymmetric
coroutine
library
hnes
libaco
october
via
github
b
simon
tatham
coroutines
c
stackless
coroutine
implementation
c
c
jsseldenthuis
coroutine
march
via
github
technical
specification
coroutines
current
compiler
support
standard
coroutines
open
source
mozy
debut
mozy
code
ericwf
coroutines
clang
trunk
working
libc
implementation
lukas
stadler
jvm
continuations
pdf
jvm
language
summit
remi
forax
november
holy
crap
jvm
coroutine
continuation
fiber
etc
archived
original
march
mono
continuations
chris
brumme
cbrumme
weblog
kexugit
fiber
mode
gone
docs
microsoft
com
retrieved
rfc
new
python
retrieved
september
semi
coroutines
archived
original
october
rust
releases
stable
async
await
syntax
november
scala
coroutines
storm
enroute
retrieved
scala
coroutines
faq
scala
coroutine
snapshots
coroutine
manual
page
tcl
built
commands
tcl
tk
retrieved
ritchie
dennis
evolution
unix
time
sharing
system
language
design
programming
methodology
lecture
notes
computer
science
vol
pp
doi
isbn
cid
reading
edit
ana
lucia
de
moura
roberto
ierusalimschy
revisiting
coroutines
acm
transactions
programming
languages
systems
citeseerx
doi
cid
external
links
edit
simon
tatham
c
oriented
comprehensive
introduction
coroutines
softpanorama
coroutine
page
contains
extensive
assembler
coroutines
links
mw
parser
output
navbox
box
sizing
border
box
border
px
solid
b
width
clear
font
size
text
align
center
padding
px
margin
em
auto
mw
parser
output
navbox
navbox
margin
top
mw
parser
output
navbox
navbox
mw
parser
output
navbox
navbox
styles
navbox
margin
top
px
mw
parser
output
navbox
inner
mw
parser
output
navbox
subgroup
width
mw
parser
output
navbox
group
mw
parser
output
navbox
title
mw
parser
output
navbox
abovebelow
padding
em
em
line
height
em
text
align
center
mw
parser
output
navbox
group
white
space
nowrap
text
align
right
mw
parser
output
navbox
mw
parser
output
navbox
subgroup
background
color
fdfdfd
mw
parser
output
navbox
list
line
height
em
border
color
fdfdfd
mw
parser
output
navbox
list
group
text
align
left
border
left
width
px
border
left
style
solid
mw
parser
output
tr
tr
navbox
abovebelow
mw
parser
output
tr
tr
navbox
group
mw
parser
output
tr
tr
navbox
image
mw
parser
output
tr
tr
navbox
list
border
top
px
solid
fdfdfd
mw
parser
output
navbox
title
background
color
ccf
mw
parser
output
navbox
abovebelow
mw
parser
output
navbox
group
mw
parser
output
navbox
subgroup
navbox
title
background
color
ddf
mw
parser
output
navbox
subgroup
navbox
group
mw
parser
output
navbox
subgroup
navbox
abovebelow
background
color
e
e
ff
mw
parser
output
navbox
even
background
color
f
f
f
mw
parser
output
navbox
odd
background
color
transparent
mw
parser
output
navbox
hlist
td
dl
mw
parser
output
navbox
hlist
td
ol
mw
parser
output
navbox
hlist
td
ul
mw
parser
output
navbox
td
hlist
dl
mw
parser
output
navbox
td
hlist
ol
mw
parser
output
navbox
td
hlist
ul
padding
em
mw
parser
output
navbox
navbar
display
block
font
size
mw
parser
output
navbox
title
navbar
float
left
text
align
left
margin
right
em
authority
control
national
libraries
united
states
newpp
limit
report
parsed
mw
cached
time
cache
expiry
reduced
expiry
false
complications
vary
revision
sha
cpu
time
usage
seconds
real
time
usage
seconds
preprocessor
visited
node
count
post
expand
include
size
bytes
template
argument
size
bytes
highest
expansion
depth
expensive
parser
function
count
unstrip
recursion
depth
unstrip
post
expand
size
bytes
lua
time
usage
seconds
lua
memory
usage
bytes
number
wikibase
entities
loaded
transclusion
expansion
time
report
ms
calls
template
total
template
reflist
template
cite
web
template
cite
book
template
authority
control
template
fix
template
primary
source
inline
template
main
template
category
handler
template
cite
journal
saved
parser
cache
key
enwiki
pcache
idhash
canonical
timestamp
revision
id
serialized
json
retrieved
oldid
categories
concurrent
computing
subroutines
hidden
categories
cs
errors
generic
name
cs
maint
multiple
names
authors
list
webarchive
template
wayback
links
articles
containing
potentially
dated
statements
articles
containing
potentially
dated
statements
articles
unsourced
statements
articles
unsourced
statements
may
articles
lccn
identifiers
navigation
menu
